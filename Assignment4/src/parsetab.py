
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '2988E0A0DE8414C8FF33ED37E3A9423C'
    
_lr_action_items = {'DIVIDE':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,212,213,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,127,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,127,127,-79,-29,-94,-82,]),'REMAINDER_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,178,-28,-133,-29,]),'RSHIFT':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,129,-78,-81,-87,-89,-61,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,129,129,129,129,-79,-29,-94,-82,]),'TYPE_CHAR':([91,219,236,272,290,322,330,],[168,168,168,168,168,168,168,]),'LESS':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,148,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,148,148,-79,-29,-94,-82,]),'MINUS_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,176,-28,-133,-29,]),'KEYWORD_CLASS':([0,2,4,5,6,11,12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,263,278,308,310,318,342,346,],[1,1,-4,-2,-3,-1,-8,1,-5,1,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,1,-174,-186,-145,-101,-137,-146,1,-199,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'DOUBLE_NUMBER':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,28,-5,28,-187,-200,-201,28,-201,28,-201,-14,-17,-201,-201,-172,28,-201,-201,-201,28,-18,-12,28,-15,-201,-201,-201,-201,28,-16,-144,-41,-9,-7,28,-140,-148,-142,28,28,-147,-201,-201,-141,28,28,28,28,28,-201,-143,-139,28,-138,28,28,28,28,28,28,28,28,28,28,-174,-186,-145,-101,-137,28,-146,28,-31,-37,-35,-30,-33,-39,-36,-38,-32,28,-34,-40,-199,28,28,28,-201,-173,-13,28,28,28,-166,-165,-201,-185,28,-167,28,28,28,-201,-151,-158,-201,-162,-161,28,-156,28,28,28,-201,-157,28,-152,28,28,-201,28,]),'EQUAL':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,225,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,156,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,156,-79,-29,-94,-82,]),'CHAR':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,59,-5,59,-187,-200,-201,59,-201,59,-201,-14,-17,-201,-201,-172,59,-201,-201,-201,59,-18,-12,59,-15,-201,-201,-201,-201,59,-16,-144,-41,-9,-7,59,-140,-148,-142,59,59,-147,-201,-201,-141,59,59,59,59,59,-201,-143,-139,59,-138,59,59,59,59,59,59,59,59,59,59,-174,-186,-145,-101,-137,59,-146,59,-31,-37,-35,-30,-33,-39,-36,-38,-32,59,-34,-40,-199,59,59,59,-201,-173,-13,59,59,59,-166,-165,-201,-185,59,-167,59,59,59,-201,-151,-158,-201,-162,-161,59,-156,59,59,59,-201,-157,59,-152,59,59,-201,59,]),'KEYWORD_BY':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,104,105,106,107,108,113,121,132,140,143,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,230,242,244,245,247,264,265,335,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-41,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-201,-29,-94,-44,-46,-82,284,-160,]),'KEYWORD_MATCH':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,54,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,88,89,90,92,105,106,107,108,113,121,132,140,143,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,242,244,245,247,264,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,133,-47,-81,-87,-89,-61,-130,-83,-53,-24,-88,-131,-76,-51,-49,-74,-19,-22,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,]),'TYPE_STRING':([91,219,236,272,290,322,330,],[167,167,167,167,167,167,167,]),'INST':([9,38,63,75,108,196,259,321,],[-132,119,-130,-131,119,-133,119,119,]),'LSHIFT':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,130,-78,-81,-87,-89,-61,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,130,130,130,130,-79,-29,-94,-82,]),'KEYWORD_NULL':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,61,-5,61,-187,-200,-201,61,-201,61,-201,-14,-17,-201,-201,-172,61,-201,-201,-201,61,-18,-12,61,-15,-201,-201,-201,-201,61,-16,-144,-41,-9,-7,61,-140,-148,-142,61,61,-147,-201,-201,-141,61,61,61,61,61,-201,-143,-139,61,-138,61,61,61,61,61,61,61,61,61,61,-174,-186,-145,-101,-137,61,-146,61,-31,-37,-35,-30,-33,-39,-36,-38,-32,61,-34,-40,-199,61,61,61,-201,-173,-13,61,61,61,-166,-165,-201,-185,61,-167,61,61,61,-201,-151,-158,-201,-162,-161,61,-156,61,61,61,-201,-157,61,-152,61,61,-201,61,]),'MINUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,31,33,34,35,36,38,39,40,41,42,45,46,49,51,53,55,56,58,59,60,61,62,63,64,65,66,67,68,70,71,72,75,77,81,83,85,86,87,90,91,92,93,103,104,105,106,107,108,109,110,111,112,113,114,115,118,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,145,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,196,201,202,203,204,205,206,207,208,210,212,213,214,226,227,228,242,243,244,249,250,253,262,263,264,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-132,-8,24,-5,24,-187,-200,-201,-27,24,-91,-92,-201,-90,24,-201,-14,-85,-17,-26,-93,-67,-73,-201,-201,-64,-172,-78,24,-201,-201,-81,-87,-201,-89,139,-130,24,-18,-12,-83,24,-15,-84,-88,-131,-76,-201,-201,-74,-201,-201,-86,24,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,24,-140,-71,-148,-142,24,24,-28,-147,-201,-201,-141,24,24,24,24,24,-201,-77,-143,-139,24,-138,24,24,-84,-75,24,24,24,24,24,24,24,24,-174,-186,-145,-101,-137,24,-146,24,-31,-37,-35,-30,-33,-39,-36,-38,-32,24,-34,-40,-199,-133,24,24,-70,-69,-68,139,139,24,-201,-65,-66,-173,-13,24,-79,-29,24,-94,24,-166,-165,-201,-185,-82,24,-167,24,24,24,-201,-151,-158,-201,-162,-161,24,-156,24,24,24,-201,-157,24,-152,24,24,-201,24,]),'KEYWORD_OBJECT':([0,2,4,5,6,11,12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,263,278,308,310,318,342,346,],[8,8,-4,-2,-3,-1,-8,8,-5,8,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,8,-174,-186,-145,-101,-137,-146,8,-199,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'KEYWORD_RETURN':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,262,263,278,283,308,310,318,341,342,346,347,355,356,],[-8,64,-5,64,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,64,-174,-186,-145,-101,-137,-146,64,-199,-201,-173,-13,-166,-165,-201,-185,-167,64,-151,-158,-156,-201,-157,-152,64,-201,64,]),'BOOL_CONSTT':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,30,-5,30,-187,-200,-201,30,-201,30,-201,-14,-17,-201,-201,-172,30,-201,-201,-201,30,-18,-12,30,-15,-201,-201,-201,-201,30,-16,-144,-41,-9,-7,30,-140,-148,-142,30,30,-147,-201,-201,-141,30,30,30,30,30,-201,-143,-139,30,-138,30,30,30,30,30,30,30,30,30,30,-174,-186,-145,-101,-137,30,-146,30,-31,-37,-35,-30,-33,-39,-36,-38,-32,30,-34,-40,-199,30,30,30,-201,-173,-13,30,30,30,-166,-165,-201,-185,30,-167,30,30,30,-201,-151,-158,-201,-162,-161,30,-156,30,30,30,-201,-157,30,-152,30,30,-201,30,]),'GEQ':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,146,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,146,146,-79,-29,-94,-82,]),'RPAREN':([9,19,21,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,97,99,100,102,104,105,106,107,108,113,120,121,132,140,143,145,166,167,168,169,170,171,172,173,192,193,194,196,197,198,199,200,203,204,205,206,207,211,212,213,215,216,217,218,221,222,223,225,228,229,230,231,234,237,238,239,241,242,244,245,246,247,254,255,256,258,259,264,265,269,273,285,286,291,292,309,323,327,331,334,335,338,349,351,],[-132,-201,-177,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,189,-192,-190,-191,-41,-72,-80,-84,-26,-71,-201,-28,-77,-24,-22,-75,-120,-123,-122,-125,227,-124,-121,228,-194,-48,-201,-133,-95,-96,244,-97,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,262,-55,-54,-52,-79,-25,-201,266,-193,-180,270,-178,-179,-29,-94,-44,274,-46,-126,-119,-118,-127,-128,-82,-201,-116,-98,-159,-164,-181,-117,-163,-129,336,-201,341,-160,344,352,354,]),'LEQ':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,149,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,149,149,-79,-29,-94,-82,]),'OR_BITWISE':([9,23,25,27,28,30,35,38,39,40,41,46,50,51,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,121,132,140,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,242,244,247,264,],[-132,-27,-91,111,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,111,-82,]),'RBRAC':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,121,132,140,143,145,166,167,168,169,171,172,193,195,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,242,244,245,247,254,255,256,258,259,264,303,323,332,337,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-120,-123,-122,-125,-124,-121,-48,242,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-126,-119,-118,-127,-128,-82,323,-129,339,343,]),'TYPE_VOID':([91,219,236,272,290,322,330,],[169,169,169,169,315,169,169,]),'TYPE_INT':([91,219,236,272,282,290,322,330,],[166,166,166,166,303,166,166,166,]),'AND_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,181,-28,-133,-29,]),'FUNTYPE':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,121,132,140,143,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,242,244,245,247,264,277,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,295,]),'TYPE_BOOLEAN':([91,219,236,272,290,322,330,],[171,171,171,171,171,171,171,]),'KEYWORD_VAL':([12,13,14,15,16,17,19,21,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,190,210,214,226,250,253,263,278,308,310,318,342,346,],[-8,48,-5,48,-187,-200,48,-177,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,48,-174,-186,-145,-101,-137,-146,48,-199,48,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'PLUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,31,33,34,35,36,38,39,40,41,42,45,46,49,51,53,55,56,58,59,60,61,62,63,64,65,66,67,68,70,71,72,75,77,81,83,85,86,87,90,91,92,93,103,104,105,106,107,108,109,110,111,112,113,114,115,118,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,145,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,196,201,202,203,204,205,206,207,208,210,212,213,214,226,227,228,242,243,244,249,250,253,262,263,264,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-132,-8,31,-5,31,-187,-200,-201,-27,31,-91,-92,-201,-90,31,-201,-14,-85,-17,-26,-93,-67,-73,-201,-201,-64,-172,-78,31,-201,-201,-81,-87,-201,-89,138,-130,31,-18,-12,-83,31,-15,-84,-88,-131,-76,-201,-201,-74,-201,-201,-86,31,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,31,-140,-71,-148,-142,31,31,-28,-147,-201,-201,-141,31,31,31,31,31,-201,-77,-143,-139,31,-138,31,31,-84,-75,31,31,31,31,31,31,31,31,-174,-186,-145,-101,-137,31,-146,31,-31,-37,-35,-30,-33,-39,-36,-38,-32,31,-34,-40,-199,-133,31,31,-70,-69,-68,138,138,31,-201,-65,-66,-173,-13,31,-79,-29,31,-94,31,-166,-165,-201,-185,-82,31,-167,31,31,31,-201,-151,-158,-201,-162,-161,31,-156,31,31,31,-201,-157,31,-152,31,31,-201,31,]),'STRING':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,72,-5,72,-187,-200,-201,72,-201,72,-201,-14,-17,-201,-201,-172,72,-201,-201,-201,72,-18,-12,72,-15,-201,-201,-201,-201,72,-16,-144,-41,-9,-7,72,-140,-148,-142,72,72,-147,-201,-201,-141,72,72,72,72,72,-201,-143,-139,72,-138,72,72,72,72,72,72,72,72,72,72,-174,-186,-145,-101,-137,72,-146,72,-31,-37,-35,-30,-33,-39,-36,-38,-32,72,-34,-40,-199,72,72,72,-201,-173,-13,72,72,72,-166,-165,-201,-185,72,-167,72,72,72,-201,-151,-158,-201,-162,-161,72,-156,72,72,72,-201,-157,72,-152,72,72,-201,72,]),'IDENTIFIER':([1,8,12,13,14,15,16,17,19,21,22,24,29,31,33,34,36,42,45,47,48,49,53,55,56,60,64,65,66,68,70,74,76,81,83,86,87,91,93,98,101,102,103,104,109,110,111,112,114,115,118,119,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,186,188,190,194,201,202,208,210,214,219,220,226,227,235,236,243,249,250,253,262,263,267,271,272,278,281,283,284,289,290,299,308,310,311,312,313,314,318,322,325,326,330,331,341,342,345,346,347,348,355,356,],[9,18,-8,9,-5,9,-187,-200,-201,-177,-201,9,-201,9,-201,-14,-17,-201,-201,-99,-100,-172,9,-201,-201,-201,9,-18,-12,9,-15,152,153,-201,-201,-201,-201,9,-16,-195,191,-196,-144,-41,-9,-7,9,-140,-148,-142,9,9,9,-147,-201,-201,-141,9,9,9,9,9,-201,-143,-139,9,-138,9,9,9,9,9,9,9,9,9,9,-174,-186,-145,-101,-137,9,-146,9,-31,-37,-35,-30,-33,-39,-36,-38,-32,9,-34,-40,232,-199,-201,240,9,9,9,-201,-173,9,261,-13,9,-196,9,9,9,-166,-165,-201,-185,9,240,9,-167,9,9,9,-201,9,9,-151,-158,-201,-162,-161,9,-156,9,9,9,9,9,-201,-157,9,-152,9,9,-201,9,]),'KEYWORD_NEW':([281,],[299,]),'KEYWORD_WHILE':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,233,250,253,263,278,308,310,318,342,346,],[-8,44,-5,44,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,44,-174,-186,-145,-101,-137,-146,44,-199,-201,-173,-13,268,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'$end':([2,4,5,6,11,14,16,109,110,188,],[0,-4,-2,-3,-1,-5,-187,-9,-7,-199,]),'COLON':([151,152,191,240,261,270,],[219,-110,236,272,-109,290,]),'KEYWORD_ELSE':([22,42,49,55,81,86,103,104,109,110,114,122,134,160,164,210,214,250,253,275,278,304,305,306,308,324,350,353,357,],[-201,-201,-172,-201,-201,-201,-144,-41,-9,-7,-148,-147,-143,-145,-146,-201,-173,-166,-165,-42,-167,-155,-154,-201,-201,333,-201,355,-153,]),'XOR':([9,23,25,28,30,35,38,39,40,41,46,50,51,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,121,132,140,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,136,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,136,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-82,]),'KEYWORD_TO':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,121,132,140,143,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,242,244,245,247,264,288,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,312,]),'BOOL_CONSTF':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,25,-5,25,-187,-200,-201,25,-201,25,-201,-14,-17,-201,-201,-172,25,-201,-201,-201,25,-18,-12,25,-15,-201,-201,-201,-201,25,-16,-144,-41,-9,-7,25,-140,-148,-142,25,25,-147,-201,-201,-141,25,25,25,25,25,-201,-143,-139,25,-138,25,25,25,25,25,25,25,25,25,25,-174,-186,-145,-101,-137,25,-146,25,-31,-37,-35,-30,-33,-39,-36,-38,-32,25,-34,-40,-199,25,25,25,-201,-173,-13,25,25,25,-166,-165,-201,-185,25,-167,25,25,25,-201,-151,-158,-201,-162,-161,25,-156,25,25,25,-201,-157,25,-152,25,25,-201,25,]),'KEYWORD_VAR':([12,13,14,15,16,17,19,21,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,190,210,214,226,250,253,263,278,308,310,318,342,346,],[-8,47,-5,47,-187,-200,47,-177,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,47,-174,-186,-145,-101,-137,-146,47,-199,47,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'INT_NUMBER':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,39,-5,39,-187,-200,-201,39,-201,39,-201,-14,-17,-201,-201,-172,39,-201,-201,-201,39,-18,-12,39,-15,-201,-201,-201,-201,39,-16,-144,-41,-9,-7,39,-140,-148,-142,39,39,-147,-201,-201,-141,39,39,39,39,39,-201,-143,-139,39,-138,39,39,39,39,39,39,39,39,39,39,-174,-186,-145,-101,-137,39,-146,39,-31,-37,-35,-30,-33,-39,-36,-38,-32,39,-34,-40,-199,39,39,39,-201,-173,-13,39,39,39,-166,-165,-201,-185,39,-167,39,39,39,-201,-151,-158,-201,-162,-161,39,-156,39,39,39,-201,-157,39,-152,39,39,-201,39,]),'NEQUAL':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,225,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,155,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,155,-79,-29,-94,-82,]),'TIMES_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,174,-28,-133,-29,]),'TIMES':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,212,213,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,128,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,128,128,-79,-29,-94,-82,]),'LSHIFT_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,180,-28,-133,-29,]),'TYPE_DOUBLE':([91,219,236,272,290,322,330,],[172,172,172,172,172,172,172,]),'DIVIDE_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,182,-28,-133,-29,]),'TERMINATOR':([9,12,13,14,15,16,17,22,23,25,27,28,29,30,32,33,34,35,36,38,39,40,41,42,43,45,46,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,75,77,79,81,82,83,84,85,86,87,88,89,90,92,93,103,104,105,106,107,108,109,110,112,113,114,115,121,122,125,132,134,135,137,140,141,142,143,144,145,150,157,158,159,160,161,162,164,165,188,193,196,203,204,205,206,207,210,211,212,213,214,215,216,217,218,222,223,225,226,228,229,242,244,245,247,250,253,262,263,264,278,283,297,298,300,302,308,310,318,336,341,342,344,346,347,352,354,355,356,],[-132,-8,49,-5,49,-187,-200,-201,-27,-91,-45,-92,-201,-90,114,-201,-14,-85,-17,-26,-93,-67,-73,-201,-23,-201,-64,-172,-56,-78,-43,-201,-201,-47,-81,-87,-201,-89,-61,-130,-201,-18,-12,-83,-53,-15,-150,-88,-131,-76,-51,-201,161,-201,-49,-74,-201,-201,-19,-149,-86,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,-140,-71,-148,-142,-28,-147,-141,-77,-143,-139,-138,-24,-21,214,-22,-20,-75,-102,49,-174,-186,-145,-101,-137,-146,49,-199,-48,-133,-70,-69,-68,-63,-62,-201,-50,-65,-66,-173,-59,-57,-58,-60,-55,-54,-52,-13,-79,-25,-29,-94,-44,-46,-166,-165,-201,-185,-82,-167,49,-108,-104,-105,-103,-151,-158,-156,342,-201,-157,-136,-152,49,-135,-134,-201,49,]),'LPAREN':([9,10,12,13,14,15,16,17,22,24,29,31,33,34,36,37,38,42,44,45,49,53,55,56,60,63,64,65,66,68,70,75,78,81,83,86,87,91,93,94,103,104,108,109,110,111,112,114,115,116,117,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,153,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,196,201,202,208,210,214,226,227,243,249,250,253,262,263,267,268,278,281,283,284,289,307,308,310,311,312,313,314,318,321,325,326,331,339,341,342,343,345,346,347,348,355,356,],[-132,21,-8,91,-5,91,-187,-200,-201,91,-201,91,-201,-14,-17,-201,120,-201,124,-201,-172,91,-201,-201,-201,-130,91,-18,-12,91,-15,-131,154,-201,-201,-201,-201,91,-16,186,-144,-41,120,-9,-7,91,-140,-148,-142,21,-176,91,91,-147,-201,-201,-141,91,91,91,91,91,-201,-143,-139,91,-138,91,91,91,91,91,91,-184,91,91,91,91,-174,-186,-145,-101,-137,91,-146,91,-31,-37,-35,-30,-33,-39,-36,-38,-32,91,-34,-40,-199,-133,91,91,91,-201,-173,-13,91,91,91,-166,-165,-201,-185,91,289,-167,91,91,91,-201,325,-151,-158,-201,-162,-161,91,-156,331,91,91,91,345,-201,-157,348,91,-152,91,91,-201,91,]),'BLOCKEND':([12,13,14,15,16,17,22,26,29,33,34,36,42,45,49,55,56,60,65,66,70,73,81,83,86,87,93,96,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,188,209,210,214,224,226,250,251,252,253,263,275,278,279,280,296,308,310,318,319,329,342,346,],[-8,-201,-5,-201,-187,-200,-201,109,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-11,-201,-201,-201,-10,-16,109,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,-201,-174,-186,-145,-101,-137,-146,-199,250,-201,-173,109,-13,-166,278,-201,-165,-185,-42,-167,-201,-168,-169,-151,-158,-156,-201,-170,-157,-152,]),'KEYWORD_IF':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,262,263,278,283,308,310,318,341,342,346,347,355,356,],[-8,78,-5,78,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,78,-174,-186,-145,-101,-137,-146,78,-199,-201,-173,-13,-166,-165,-201,-185,-167,307,-151,-158,-156,-201,-157,-152,307,-201,307,]),'AND_BITWISE':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,163,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,163,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-82,]),'GREATER':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,206,207,212,213,215,216,217,218,222,223,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,147,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,147,147,-79,-29,-94,-82,]),'AND':([9,23,25,27,28,30,35,38,39,40,41,46,50,51,52,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,121,132,140,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,242,244,245,247,264,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,131,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,131,-46,-82,]),'LBRAC':([9,38,63,75,108,196,260,301,320,],[-132,118,-130,-131,118,-133,282,322,330,]),'ASOP':([9,23,38,63,75,92,121,166,167,168,169,171,172,196,242,254,255,256,257,258,259,315,316,317,323,],[-132,-27,-26,-130,-131,177,-28,-120,-123,-122,-125,-124,-121,-133,-29,-126,-119,-118,281,-127,-128,-125,-182,328,-129,]),'XOR_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,185,-28,-133,-29,]),'RSHIFT_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,175,-28,-133,-29,]),'OR_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,179,-28,-133,-29,]),'KEYWORD_DEF':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,263,278,308,310,318,342,346,],[-8,76,-5,76,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,76,-174,-186,-145,-101,-137,-146,76,-199,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'KEYWORD_ARRAY':([219,236,272,281,290,299,322,330,],[260,260,260,301,260,320,260,260,]),'KEYWORD_UNTIL':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,121,132,140,143,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,242,244,245,247,264,288,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,313,]),'KEYWORD_FOR':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,263,278,308,310,318,342,346,],[-8,94,-5,94,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,94,-174,-186,-145,-101,-137,-146,94,-199,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'TILDA':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,68,-5,68,-187,-200,-201,68,-201,68,-201,-14,-17,-201,-201,-172,68,-201,-201,-201,68,-18,-12,68,-15,-201,-201,-201,-201,68,-16,-144,-41,-9,-7,68,-140,-148,-142,68,68,-147,-201,-201,-141,68,68,68,68,68,-201,-143,-139,68,-138,68,68,68,68,68,68,68,68,68,68,-174,-186,-145,-101,-137,68,-146,68,-31,-37,-35,-30,-33,-39,-36,-38,-32,68,-34,-40,-199,68,68,68,-201,-173,-13,68,68,68,-166,-165,-201,-185,68,-167,68,68,68,-201,-151,-158,-201,-162,-161,68,-156,68,68,68,-201,-157,68,-152,68,68,-201,68,]),'BLOCKBEGIN':([3,7,12,13,14,15,16,17,18,20,22,29,33,34,36,42,45,49,55,56,60,65,66,70,80,81,83,86,87,93,95,103,104,109,110,112,114,115,122,125,133,134,135,137,157,158,159,160,161,162,164,165,187,188,189,210,214,226,248,250,253,262,263,266,274,275,276,278,283,287,293,294,295,308,310,318,328,333,340,341,342,346,347,355,356,],[12,17,-8,12,-5,12,-187,-200,-6,-188,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,159,-201,-201,-201,-201,-16,-201,-144,-41,-9,-7,-140,-148,-142,-147,-141,209,-143,-139,-138,12,-174,-186,-145,-101,-137,-146,12,12,-199,-189,-201,-173,-13,-201,-166,-165,-201,-185,-201,-201,-42,-201,-167,12,12,12,12,-171,-151,-158,-156,-175,-201,12,-201,-157,-152,12,-201,12,]),'KEYWORD_DO':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,122,125,134,135,137,157,158,159,160,161,162,164,165,188,210,214,226,250,253,263,278,308,310,318,342,346,],[-8,95,-5,95,-187,-200,-201,-201,-201,-14,-17,-201,-201,-172,-201,-201,-201,-18,-12,-15,-201,-201,-201,-201,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,95,-174,-186,-145,-101,-137,-146,95,-199,-201,-173,-13,-166,-165,-185,-167,-151,-158,-156,-157,-152,]),'PLUS_ASSIGN':([9,23,38,63,75,92,121,196,242,],[-132,-27,-26,-130,-131,184,-28,-133,-29,]),'NOT':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,118,120,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,146,147,148,149,154,155,156,157,158,159,160,161,162,163,164,165,174,175,176,177,178,179,180,181,182,183,184,185,188,201,202,208,210,214,226,227,243,249,250,253,262,263,267,278,281,283,284,289,308,310,311,312,313,314,318,325,326,331,341,342,345,346,347,348,355,356,],[-8,53,-5,53,-187,-200,-201,53,-201,53,-201,-14,-17,-201,-201,-172,53,-201,-201,-201,53,-18,-12,53,-15,-201,-201,-201,-201,53,-16,-144,-41,-9,-7,53,-140,-148,-142,53,53,-147,-201,-201,-141,53,53,53,53,53,-201,-143,-139,53,-138,53,53,53,53,53,53,53,53,53,53,-174,-186,-145,-101,-137,53,-146,53,-31,-37,-35,-30,-33,-39,-36,-38,-32,53,-34,-40,-199,53,53,53,-201,-173,-13,53,53,53,-166,-165,-201,-185,53,-167,53,53,53,-201,-151,-158,-201,-162,-161,53,-156,53,53,53,-201,-157,53,-152,53,53,-201,53,]),'KEYWORD_CASE':([104,109,110,209,251,252,275,279,280,296,319,329,],[-41,-9,-7,249,249,-201,-42,-201,-168,-169,-201,-170,]),'COMMA':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,99,100,105,106,107,108,113,121,132,140,143,145,151,152,166,167,168,169,171,172,192,193,196,197,200,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,229,234,237,239,242,244,245,247,254,255,256,258,259,261,264,269,273,291,292,323,349,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-192,190,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,220,-110,-120,-123,-122,-125,-124,-121,-194,-48,-133,243,-97,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-193,-180,271,-29,-94,-44,-46,-126,-119,-118,-127,-128,-109,-82,-116,-98,-181,-117,-129,243,]),'REMAINDER':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,121,132,140,145,196,203,204,205,212,213,228,242,244,264,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,126,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,126,126,-79,-29,-94,-82,]),'OR':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,121,132,140,145,193,196,203,204,205,206,207,211,212,213,215,216,217,218,222,223,225,228,242,244,245,247,264,351,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,123,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-44,-46,-82,123,]),'CHOOSE':([232,],[267,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([13,15,157,165,283,347,356,],[22,22,22,22,22,22,22,]),'variable_declaration_initializer':([281,],[297,]),'parker':([37,],[116,]),'switch_label':([209,251,],[248,248,]),'array_access':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'block_statements_opt':([13,15,157,],[26,96,224,]),'inclusive_or_expression':([13,15,64,91,118,120,154,157,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[27,27,27,27,27,27,27,27,27,27,27,27,247,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_statement':([13,15,157,165,],[29,29,29,29,]),'equality_expression':([13,15,64,91,111,118,120,136,154,157,163,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[79,79,79,79,79,79,79,79,79,79,225,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'statement_expression':([13,15,157,165,283,347,356,],[32,32,32,32,32,32,32,]),'for_loop':([186,],[230,]),'local_variable_declaration_statement':([13,15,157,165,],[34,34,34,34,]),'method_return_type':([290,],[317,]),'ProgramStructure':([0,],[2,]),'SingletonObject':([0,2,13,15,157,165,],[6,6,36,36,36,36,]),'method_header_name':([13,15,157,165,],[37,37,37,37,]),'class_initializer':([281,],[300,]),'array_data_type':([219,236,272,290,322,330,],[258,258,258,258,258,258,]),'int_float':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'name':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,219,227,236,243,249,267,272,281,283,284,290,299,314,322,325,326,330,331,345,347,348,356,],[38,38,108,108,108,38,108,38,108,38,38,108,108,108,108,108,108,108,108,108,108,108,108,38,108,108,38,108,38,38,108,38,108,259,108,259,38,38,38,259,38,38,38,259,321,38,259,38,38,259,38,38,38,108,38,]),'class_body_start':([7,],[15,]),'class_params':([19,],[100,]),'argument_list_opt':([120,331,],[199,338,]),'variable_declarator_id':([101,],[192,]),'for_step_opts':([265,],[285,]),'conditional_and_expression':([13,15,64,91,118,120,154,157,165,183,201,202,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[52,52,52,52,52,52,52,52,52,52,245,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'unary_expression':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[40,40,105,113,132,40,145,40,40,40,40,203,204,205,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,264,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ObjectDeclare':([0,2,13,15,157,165,],[3,3,3,3,3,3,]),'unary_expression_not_plus_minus':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'switch_statement':([13,15,157,165,283,347,356,],[42,42,42,42,42,42,42,]),'c_literal':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'valid_variable':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[92,92,106,106,106,92,106,92,106,92,92,106,106,106,106,106,106,106,106,106,106,106,106,92,106,106,92,106,92,92,106,92,106,106,92,92,92,92,92,92,92,92,92,92,92,92,106,92,]),'reference_type':([219,236,272,290,322,330,],[255,255,255,255,255,255,]),'argument_list':([120,331,345,],[197,197,349,]),'conditional_or_expression':([13,15,64,91,118,120,154,157,165,183,202,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,351,43,]),'variable_declaration_body':([74,],[150,]),'class_param_clause':([10,],[20,]),'do_while_statement':([13,15,157,165,],[45,45,45,45,]),'multiplicative_expression':([13,15,64,91,111,118,120,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[46,46,46,46,46,46,46,46,46,46,212,213,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'for_update':([186,],[231,]),'shift_expression':([13,15,64,91,111,118,120,136,146,147,148,149,154,155,156,157,163,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[50,50,50,50,50,50,50,50,215,216,217,218,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'variable_literal':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'end_scope':([26,96,224,],[110,188,263,]),'fun_params_opt':([194,],[238,]),'class_and_objects':([0,2,],[5,11,]),'assignment_operator':([92,],[183,]),'expression':([13,15,64,91,118,120,154,157,165,202,243,249,267,281,283,284,314,325,326,331,345,347,356,],[54,54,144,173,195,200,221,54,54,246,273,277,288,302,54,309,327,334,335,200,200,54,54,]),'block':([3,13,15,157,165,187,283,287,293,294,340,347,356,],[14,55,55,55,55,233,308,310,318,319,346,55,55,]),'if_then_else_statement':([13,15,157,165,],[56,56,56,56,]),'for_untilTo':([288,],[311,]),'exclusive_or_expression':([13,15,64,91,111,118,120,154,157,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[57,57,57,57,193,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'if_then_else_intermediate':([283,347,356,],[306,350,357,]),'if_then_statement':([13,15,157,165,],[60,60,60,60,]),'marker':([22,29,33,42,45,55,56,60,81,83,86,87,95,123,124,131,210,230,252,262,266,274,276,279,289,308,311,333,341,355,],[103,112,115,122,125,134,135,137,160,162,164,165,187,201,202,208,253,265,280,283,287,293,294,296,314,134,326,340,347,356,]),'additive_expression':([13,15,64,91,111,118,120,129,130,136,146,147,148,149,154,155,156,157,163,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[62,62,62,62,62,62,62,206,207,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'simple_name':([1,13,15,24,31,53,64,68,91,111,118,119,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,219,227,236,243,249,267,272,281,283,284,290,299,314,322,325,326,330,331,345,347,348,356,],[10,63,63,63,63,63,63,63,63,63,63,196,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'method_declaration':([13,15,157,165,],[65,65,65,65,]),'fun_params':([194,],[239,]),'block_statement':([13,15,157,165,],[66,66,66,226,]),'primitive_type':([91,219,236,272,290,322,330,],[170,256,256,256,256,256,256,]),'literal':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'relational_expression':([13,15,64,91,111,118,120,136,154,155,156,157,163,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[69,69,69,69,69,69,69,69,69,222,223,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'statement':([13,15,157,165,],[70,70,70,70,]),'cast_expression':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'type':([219,236,272,290,322,330,],[257,269,292,316,332,337,]),'empty':([13,15,19,22,29,33,37,42,45,55,56,60,64,81,83,86,87,95,120,123,124,131,157,190,194,210,230,248,252,262,265,266,274,276,279,289,306,308,311,319,331,333,341,350,355,],[73,73,102,104,104,104,117,104,104,104,104,104,141,104,104,104,104,104,198,104,104,104,73,235,241,104,104,275,104,104,286,104,104,104,104,104,275,104,104,275,198,104,104,275,104,]),'normal_statement':([13,15,157,165,283,347,356,],[83,83,83,83,305,305,305,]),'qualified_name':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,219,227,236,243,249,267,272,281,283,284,290,299,314,322,325,326,330,331,345,347,348,356,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'class_body':([7,],[16,]),'class_param':([19,190,],[99,234,]),'method_invocation':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[71,71,107,107,107,140,107,140,107,140,140,107,107,107,107,107,107,107,107,107,107,107,107,140,107,107,71,107,71,140,107,140,107,107,140,140,140,140,71,140,140,140,140,140,140,71,107,71,]),'class_header':([0,2,13,15,157,165,],[7,7,7,7,7,7,]),'class_declaration_keyword_opt':([19,190,],[101,101,]),'method_start_scope':([80,],[157,]),'method_header':([13,15,157,165,],[80,80,80,80,]),'empty_statement':([13,15,157,165,283,347,356,],[81,81,81,81,81,81,81,]),'local_variable_declaration':([13,15,157,165,],[82,82,82,82,]),'func_arg_start':([10,116,],[19,194,]),'if_then_else_statement_precedence':([283,347,356,],[304,304,304,]),'declaration_keyword':([13,15,19,157,165,190,],[74,74,98,74,74,98,]),'for_statement':([13,15,157,165,],[33,33,33,33,]),'fun_variable_declarator_id':([194,271,],[237,291,]),'narker':([248,306,319,350,],[276,324,329,353,]),'class_data_type':([219,236,272,290,322,330,],[254,254,254,254,254,254,]),'and_expression':([13,15,64,91,111,118,120,136,154,157,165,183,201,202,208,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[84,84,84,84,84,84,84,211,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'base_variable_set':([13,15,24,31,53,64,68,91,111,118,120,126,127,128,129,130,136,138,139,146,147,148,149,154,155,156,157,163,165,183,201,202,208,227,243,249,267,281,283,284,314,325,326,331,345,347,348,356,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'return_statement':([13,15,157,165,283,347,356,],[86,86,86,86,86,86,86,]),'switch_block_statement':([209,251,],[252,279,]),'block_statements':([13,15,157,],[87,87,87,]),'assignment_expression':([13,15,64,91,118,120,154,157,165,183,202,243,249,267,281,283,284,314,325,326,331,345,347,356,],[88,88,88,88,88,88,88,88,88,229,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'expression_optional':([64,],[142,]),'class_params_opt':([19,],[97,]),'assignment':([13,15,64,91,118,120,154,157,165,183,202,243,249,267,281,283,284,314,325,326,331,345,347,356,],[89,89,143,143,143,143,143,89,89,143,143,143,143,143,143,89,143,143,143,143,143,143,89,89,]),'method_body':([80,],[158,]),'start_scope':([3,13,15,157,165,187,283,287,293,294,340,347,356,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'array_initializer':([281,],[298,]),'identifiers':([74,],[151,]),'class_declaration':([0,2,13,15,157,165,],[4,4,93,93,93,93,]),'switch_block':([133,],[210,]),'switch_block_statements':([209,],[251,]),'dimension':([38,108,],[121,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramStructure","S'",1,None,None,None),
  ('ProgramStructure -> ProgramStructure class_and_objects','ProgramStructure',2,'p_program_structure','backpatch.py',110),
  ('ProgramStructure -> class_and_objects','ProgramStructure',1,'p_program_structure','backpatch.py',111),
  ('class_and_objects -> SingletonObject','class_and_objects',1,'p_class_and_objects','backpatch.py',118),
  ('class_and_objects -> class_declaration','class_and_objects',1,'p_class_and_objects','backpatch.py',119),
  ('SingletonObject -> ObjectDeclare block','SingletonObject',2,'p_SingletonObject','backpatch.py',123),
  ('ObjectDeclare -> KEYWORD_OBJECT IDENTIFIER','ObjectDeclare',2,'p_object_declare','backpatch.py',134),
  ('block -> start_scope block_statements_opt end_scope','block',3,'p_block','backpatch.py',141),
  ('start_scope -> BLOCKBEGIN','start_scope',1,'p_start_scope','backpatch.py',146),
  ('end_scope -> BLOCKEND','end_scope',1,'p_end_scope','backpatch.py',157),
  ('block_statements_opt -> block_statements','block_statements_opt',1,'p_block_statements_opt','backpatch.py',167),
  ('block_statements_opt -> empty','block_statements_opt',1,'p_block_statements_opt','backpatch.py',168),
  ('block_statements -> block_statement','block_statements',1,'p_block_statements','backpatch.py',173),
  ('block_statements -> block_statements marker block_statement','block_statements',3,'p_block_statements','backpatch.py',174),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block_statement','backpatch.py',184),
  ('block_statement -> statement','block_statement',1,'p_block_statement','backpatch.py',185),
  ('block_statement -> class_declaration','block_statement',1,'p_block_statement','backpatch.py',186),
  ('block_statement -> SingletonObject','block_statement',1,'p_block_statement','backpatch.py',187),
  ('block_statement -> method_declaration','block_statement',1,'p_block_statement','backpatch.py',188),
  ('expression -> assignment_expression','expression',1,'p_expression','backpatch.py',194),
  ('expression_optional -> expression','expression_optional',1,'p_expression_optional','backpatch.py',202),
  ('expression_optional -> empty','expression_optional',1,'p_expression_optional','backpatch.py',203),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','backpatch.py',209),
  ('assignment_expression -> conditional_or_expression','assignment_expression',1,'p_assignment_expression','backpatch.py',210),
  ('assignment_expression -> method_invocation','assignment_expression',1,'p_assignment_expression','backpatch.py',211),
  ('assignment -> valid_variable assignment_operator assignment_expression','assignment',3,'p_assignment','backpatch.py',227),
  ('valid_variable -> name','valid_variable',1,'p_valid_variable','backpatch.py',236),
  ('valid_variable -> array_access','valid_variable',1,'p_valid_variable1','backpatch.py',244),
  ('array_access -> name dimension','array_access',2,'p_array_access','backpatch.py',248),
  ('dimension -> LBRAC expression RBRAC','dimension',3,'p_dimension','backpatch.py',255),
  ('assignment_operator -> ASOP','assignment_operator',1,'p_assignment_operator','backpatch.py',262),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',263),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',264),
  ('assignment_operator -> REMAINDER_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',265),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',266),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',267),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',268),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',269),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',270),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',271),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',272),
  ('marker -> empty','marker',1,'p_marker','backpatch.py',281),
  ('narker -> empty','narker',1,'p_narker','backpatch.py',286),
  ('conditional_or_expression -> conditional_and_expression','conditional_or_expression',1,'p_conditional_or_expression','backpatch.py',293),
  ('conditional_or_expression -> conditional_or_expression OR marker conditional_and_expression','conditional_or_expression',4,'p_conditional_or_expression','backpatch.py',294),
  ('conditional_and_expression -> inclusive_or_expression','conditional_and_expression',1,'p_conditional_and_expression','backpatch.py',311),
  ('conditional_and_expression -> conditional_and_expression AND marker inclusive_or_expression','conditional_and_expression',4,'p_conditional_and_expression','backpatch.py',312),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','backpatch.py',326),
  ('inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','backpatch.py',327),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','backpatch.py',340),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','backpatch.py',341),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','backpatch.py',354),
  ('and_expression -> and_expression AND_BITWISE equality_expression','and_expression',3,'p_and_expression','backpatch.py',355),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','backpatch.py',368),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',369),
  ('equality_expression -> equality_expression NEQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',370),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','backpatch.py',386),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',387),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',388),
  ('relational_expression -> relational_expression GEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',389),
  ('relational_expression -> relational_expression LEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',390),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','backpatch.py',407),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',408),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',409),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','backpatch.py',423),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',424),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',425),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','backpatch.py',438),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',439),
  ('multiplicative_expression -> multiplicative_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',440),
  ('multiplicative_expression -> multiplicative_expression REMAINDER unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',441),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',454),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',455),
  ('unary_expression -> unary_expression_not_plus_minus','unary_expression',1,'p_unary_expression','backpatch.py',456),
  ('unary_expression_not_plus_minus -> base_variable_set','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','backpatch.py',470),
  ('unary_expression_not_plus_minus -> TILDA unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus','backpatch.py',471),
  ('unary_expression_not_plus_minus -> cast_expression','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','backpatch.py',472),
  ('unary_expression_not_plus_minus -> NOT unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus1','backpatch.py',487),
  ('base_variable_set -> variable_literal','base_variable_set',1,'p_base_variable_set','backpatch.py',494),
  ('base_variable_set -> LPAREN expression RPAREN','base_variable_set',3,'p_base_variable_set','backpatch.py',495),
  ('variable_literal -> valid_variable','variable_literal',1,'p_variableliteral','backpatch.py',509),
  ('variable_literal -> primary','variable_literal',1,'p_variableliteral','backpatch.py',510),
  ('cast_expression -> LPAREN primitive_type RPAREN unary_expression','cast_expression',4,'p_cast_expression','backpatch.py',518),
  ('primary -> literal','primary',1,'p_primary','backpatch.py',526),
  ('primary -> method_invocation','primary',1,'p_primary','backpatch.py',527),
  ('literal -> int_float','literal',1,'p_literal','backpatch.py',534),
  ('literal -> c_literal','literal',1,'p_literal','backpatch.py',535),
  ('c_literal -> CHAR','c_literal',1,'p_c_literal','backpatch.py',544),
  ('c_literal -> STRING','c_literal',1,'p_c_literal','backpatch.py',545),
  ('c_literal -> KEYWORD_NULL','c_literal',1,'p_c_literal','backpatch.py',546),
  ('c_literal -> BOOL_CONSTT','c_literal',1,'p_c_literal_binary_true','backpatch.py',553),
  ('c_literal -> BOOL_CONSTF','c_literal',1,'p_c_literal_binary_false','backpatch.py',562),
  ('int_float -> DOUBLE_NUMBER','int_float',1,'p_int_float','backpatch.py',570),
  ('int_float -> INT_NUMBER','int_float',1,'p_int_float','backpatch.py',571),
  ('method_invocation -> name LPAREN argument_list_opt RPAREN','method_invocation',4,'p_method_invocation','backpatch.py',581),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt','backpatch.py',598),
  ('argument_list_opt -> empty','argument_list_opt',1,'p_argument_list_opt2','backpatch.py',603),
  ('argument_list -> expression','argument_list',1,'p_argument_list','backpatch.py',607),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','backpatch.py',608),
  ('declaration_keyword -> KEYWORD_VAR','declaration_keyword',1,'p_declaration_keyword','backpatch.py',620),
  ('declaration_keyword -> KEYWORD_VAL','declaration_keyword',1,'p_declaration_keyword','backpatch.py',621),
  ('local_variable_declaration_statement -> local_variable_declaration TERMINATOR','local_variable_declaration_statement',2,'p_local_variable_declaration_statement','backpatch.py',627),
  ('local_variable_declaration -> declaration_keyword variable_declaration_body','local_variable_declaration',2,'p_local_variable_declaration','backpatch.py',632),
  ('variable_declaration_initializer -> expression','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',636),
  ('variable_declaration_initializer -> array_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',637),
  ('variable_declaration_initializer -> class_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',638),
  ('variable_argument_list -> variable_declaration_initializer','variable_argument_list',1,'p_variable_argument_list','backpatch.py',644),
  ('variable_argument_list -> variable_argument_list COMMA variable_declaration_initializer','variable_argument_list',3,'p_variable_argument_list','backpatch.py',645),
  ('variable_declaration_body -> identifiers COLON type ASOP variable_declaration_initializer','variable_declaration_body',5,'p_variable_declaration_body_1','backpatch.py',653),
  ('identifiers -> identifiers COMMA IDENTIFIER','identifiers',3,'p_identifiers','backpatch.py',678),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','backpatch.py',679),
  ('variable_list -> variable_declarator_id','variable_list',1,'p_variable_list','backpatch.py',701),
  ('variable_list -> variable_list COMMA variable_declarator_id','variable_list',3,'p_variable_list','backpatch.py',702),
  ('variable_dec -> IDENTIFIER type_opt','variable_dec',2,'p_variable_dec','backpatch.py',710),
  ('expr_opt -> ASOP variable_declaration_initializer','expr_opt',2,'p_expr_opt','backpatch.py',725),
  ('expr_opt -> empty','expr_opt',1,'p_expr_opt','backpatch.py',726),
  ('variable_declarator_id -> IDENTIFIER COLON type','variable_declarator_id',3,'p_variable_declarator_id','backpatch.py',735),
  ('fun_variable_declarator_id -> IDENTIFIER COLON type','fun_variable_declarator_id',3,'p_fun_variable_declarator_id','backpatch.py',742),
  ('type -> primitive_type','type',1,'p_type','backpatch.py',756),
  ('type -> reference_type','type',1,'p_type','backpatch.py',757),
  ('primitive_type -> TYPE_INT','primitive_type',1,'p_primitive_type','backpatch.py',762),
  ('primitive_type -> TYPE_DOUBLE','primitive_type',1,'p_primitive_type','backpatch.py',763),
  ('primitive_type -> TYPE_CHAR','primitive_type',1,'p_primitive_type','backpatch.py',764),
  ('primitive_type -> TYPE_STRING','primitive_type',1,'p_primitive_type','backpatch.py',765),
  ('primitive_type -> TYPE_BOOLEAN','primitive_type',1,'p_primitive_type','backpatch.py',766),
  ('primitive_type -> TYPE_VOID','primitive_type',1,'p_primitive_type','backpatch.py',767),
  ('reference_type -> class_data_type','reference_type',1,'p_reference_type','backpatch.py',773),
  ('reference_type -> array_data_type','reference_type',1,'p_reference_type','backpatch.py',774),
  ('class_data_type -> name','class_data_type',1,'p_class_data_type','backpatch.py',779),
  ('array_data_type -> KEYWORD_ARRAY LBRAC TYPE_INT RBRAC','array_data_type',4,'p_array_data_type','backpatch.py',783),
  ('name -> simple_name','name',1,'p_name','backpatch.py',794),
  ('name -> qualified_name','name',1,'p_name','backpatch.py',795),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','backpatch.py',802),
  ('qualified_name -> name INST simple_name','qualified_name',3,'p_qualified_name','backpatch.py',809),
  ('array_initializer -> KEYWORD_NEW KEYWORD_ARRAY LBRAC type RBRAC LPAREN conditional_or_expression RPAREN','array_initializer',8,'p_array_initializer','backpatch.py',818),
  ('array_initializer -> KEYWORD_ARRAY LBRAC type RBRAC LPAREN argument_list RPAREN','array_initializer',7,'p_array_initializer','backpatch.py',819),
  ('class_initializer -> KEYWORD_NEW name LPAREN argument_list_opt RPAREN','class_initializer',5,'p_class_initializer','backpatch.py',849),
  ('statement -> normal_statement marker','statement',2,'p_statement','backpatch.py',860),
  ('statement -> if_then_statement marker','statement',2,'p_statement','backpatch.py',861),
  ('statement -> if_then_else_statement marker','statement',2,'p_statement','backpatch.py',862),
  ('statement -> while_statement marker','statement',2,'p_statement','backpatch.py',863),
  ('statement -> do_while_statement marker','statement',2,'p_statement','backpatch.py',864),
  ('statement -> for_statement marker','statement',2,'p_statement','backpatch.py',865),
  ('normal_statement -> block marker','normal_statement',2,'p_normal_statement','backpatch.py',870),
  ('normal_statement -> expression_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',871),
  ('normal_statement -> empty_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',872),
  ('normal_statement -> return_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',873),
  ('normal_statement -> switch_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',874),
  ('expression_statement -> statement_expression TERMINATOR','expression_statement',2,'p_expression_statement','backpatch.py',880),
  ('statement_expression -> assignment','statement_expression',1,'p_statement_expression','backpatch.py',886),
  ('statement_expression -> method_invocation','statement_expression',1,'p_statement_expression','backpatch.py',887),
  ('if_then_statement -> KEYWORD_IF LPAREN expression RPAREN marker block','if_then_statement',6,'p_if_then_statement','backpatch.py',895),
  ('if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker block','if_then_else_statement',10,'p_if_then_else_statement','backpatch.py',904),
  ('if_then_else_statement_precedence -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker if_then_else_intermediate','if_then_else_statement_precedence',10,'p_if_then_else_statement_precedence','backpatch.py',916),
  ('if_then_else_intermediate -> normal_statement','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',928),
  ('if_then_else_intermediate -> if_then_else_statement_precedence','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',929),
  ('while_statement -> KEYWORD_WHILE LPAREN marker expression RPAREN marker block','while_statement',7,'p_while_statement','backpatch.py',935),
  ('do_while_statement -> KEYWORD_DO marker block KEYWORD_WHILE LPAREN marker expression RPAREN TERMINATOR','do_while_statement',9,'p_do_while_statement','backpatch.py',947),
  ('for_statement -> KEYWORD_FOR LPAREN for_update RPAREN marker block','for_statement',6,'p_for_statement','backpatch.py',960),
  ('for_update -> for_loop marker for_step_opts','for_update',3,'p_for_update','backpatch.py',971),
  ('for_loop -> IDENTIFIER CHOOSE expression for_untilTo marker expression','for_loop',6,'p_for_loop','backpatch.py',981),
  ('for_untilTo -> KEYWORD_UNTIL','for_untilTo',1,'p_for_untilTo1','backpatch.py',997),
  ('for_untilTo -> KEYWORD_TO','for_untilTo',1,'p_for_untilTo2','backpatch.py',1004),
  ('for_step_opts -> KEYWORD_BY expression','for_step_opts',2,'p_for_step_opts','backpatch.py',1011),
  ('for_step_opts -> empty','for_step_opts',1,'p_for_step_opts','backpatch.py',1012),
  ('switch_statement -> expression KEYWORD_MATCH switch_block marker','switch_statement',4,'p_switch_statement','backpatch.py',1022),
  ('switch_block -> BLOCKBEGIN BLOCKEND','switch_block',2,'p_switch_block','backpatch.py',1033),
  ('switch_block -> BLOCKBEGIN switch_block_statements BLOCKEND','switch_block',3,'p_switch_block2','backpatch.py',1040),
  ('switch_block_statements -> switch_block_statement marker','switch_block_statements',2,'p_switch_block_statements','backpatch.py',1049),
  ('switch_block_statements -> switch_block_statements switch_block_statement marker','switch_block_statements',3,'p_switch_block_statements','backpatch.py',1050),
  ('switch_block_statement -> switch_label narker marker block narker','switch_block_statement',5,'p_switch_block_statement','backpatch.py',1066),
  ('switch_label -> KEYWORD_CASE expression FUNTYPE','switch_label',3,'p_switch_label','backpatch.py',1074),
  ('empty_statement -> TERMINATOR','empty_statement',1,'p_empty_statement','backpatch.py',1083),
  ('return_statement -> KEYWORD_RETURN expression_optional TERMINATOR','return_statement',3,'p_return_statement','backpatch.py',1089),
  ('method_declaration -> method_header method_body','method_declaration',2,'p_method_declaration','backpatch.py',1105),
  ('method_header -> method_header_name parker func_arg_start fun_params_opt RPAREN COLON method_return_type ASOP','method_header',8,'p_method_header','backpatch.py',1110),
  ('parker -> empty','parker',1,'p_parker','backpatch.py',1125),
  ('func_arg_start -> LPAREN','func_arg_start',1,'p_func_arg_start','backpatch.py',1131),
  ('fun_params_opt -> fun_params','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1141),
  ('fun_params_opt -> empty','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1142),
  ('fun_params -> fun_variable_declarator_id','fun_params',1,'p_fun_params','backpatch.py',1147),
  ('fun_params -> fun_params COMMA fun_variable_declarator_id','fun_params',3,'p_fun_params','backpatch.py',1148),
  ('method_return_type -> type','method_return_type',1,'p_method_return_type','backpatch.py',1157),
  ('method_return_type -> TYPE_VOID','method_return_type',1,'p_method_return_type1','backpatch.py',1162),
  ('method_header_name -> KEYWORD_DEF IDENTIFIER','method_header_name',2,'p_method_header_name','backpatch.py',1167),
  ('method_body -> method_start_scope block_statements_opt end_scope','method_body',3,'p_method_body','backpatch.py',1174),
  ('method_start_scope -> BLOCKBEGIN','method_start_scope',1,'p_method_start_scope','backpatch.py',1179),
  ('class_declaration -> class_header class_body','class_declaration',2,'p_class_declaration','backpatch.py',1188),
  ('class_header -> KEYWORD_CLASS simple_name class_param_clause','class_header',3,'p_class_header','backpatch.py',1193),
  ('class_param_clause -> func_arg_start class_params_opt RPAREN','class_param_clause',3,'p_class_param_clause','backpatch.py',1205),
  ('class_params_opt -> class_params','class_params_opt',1,'p_class_param_opt','backpatch.py',1211),
  ('class_params_opt -> empty','class_params_opt',1,'p_class_param_opt','backpatch.py',1212),
  ('class_params -> class_param','class_params',1,'p_class_params','backpatch.py',1217),
  ('class_params -> class_params COMMA class_param','class_params',3,'p_class_params','backpatch.py',1218),
  ('class_param -> class_declaration_keyword_opt variable_declarator_id','class_param',2,'p_class_param','backpatch.py',1227),
  ('class_declaration_keyword_opt -> declaration_keyword','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt1','backpatch.py',1232),
  ('class_declaration_keyword_opt -> empty','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt2','backpatch.py',1236),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','backpatch.py',1240),
  ('type_opt -> empty','type_opt',1,'p_type_opt','backpatch.py',1241),
  ('class_body -> class_body_start block_statements_opt end_scope','class_body',3,'p_class_body','backpatch.py',1249),
  ('class_body_start -> BLOCKBEGIN','class_body_start',1,'p_class_body_start','backpatch.py',1255),
  ('empty -> <empty>','empty',0,'p_empty','backpatch.py',1263),
]


# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1E9568DE05270A3C485867E2556A9364'
    
_lr_action_items = {'DIVIDE':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,215,216,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,126,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,126,126,-79,-29,-94,-82,]),'REMAINDER_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,177,-28,-133,-29,]),'RSHIFT':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,128,-78,-81,-87,-89,-61,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,128,128,128,128,-79,-29,-94,-82,]),'TYPE_CHAR':([91,222,239,242,271,321,328,],[167,167,167,167,167,167,167,]),'LESS':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,147,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,147,147,-79,-29,-94,-82,]),'MINUS_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,175,-28,-133,-29,]),'KEYWORD_CLASS':([0,2,4,5,6,11,12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,264,279,309,311,317,340,344,],[1,1,-4,-2,-3,-1,-8,1,-5,1,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,1,-174,-185,-145,-101,-137,-146,1,-198,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'DOUBLE_NUMBER':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,28,-5,28,-186,-199,-200,28,-200,28,-200,-14,-17,-200,-200,-172,28,-200,-200,-200,28,-18,-12,28,-15,-200,-200,-200,-200,28,-16,-144,-41,-9,-7,28,-140,-148,-142,28,28,-147,-200,-200,-141,28,28,28,28,28,-200,-143,-139,28,-138,28,28,28,28,28,28,28,28,28,28,-174,-185,-145,-101,-137,28,-146,28,-31,-37,-35,-30,-33,-39,-36,-38,-32,28,-34,-40,-198,28,28,28,-200,-173,-13,28,28,28,-166,-165,-200,-184,28,-167,28,28,28,-200,-151,-158,-200,-162,-161,28,-156,28,28,28,-200,-157,28,-152,28,28,-200,28,]),'EQUAL':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,228,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,155,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,155,-79,-29,-94,-82,]),'CHAR':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,59,-5,59,-186,-199,-200,59,-200,59,-200,-14,-17,-200,-200,-172,59,-200,-200,-200,59,-18,-12,59,-15,-200,-200,-200,-200,59,-16,-144,-41,-9,-7,59,-140,-148,-142,59,59,-147,-200,-200,-141,59,59,59,59,59,-200,-143,-139,59,-138,59,59,59,59,59,59,59,59,59,59,-174,-185,-145,-101,-137,59,-146,59,-31,-37,-35,-30,-33,-39,-36,-38,-32,59,-34,-40,-198,59,59,59,-200,-173,-13,59,59,59,-166,-165,-200,-184,59,-167,59,59,59,-200,-151,-158,-200,-162,-161,59,-156,59,59,59,-200,-157,59,-152,59,59,-200,59,]),'KEYWORD_BY':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,104,105,106,107,108,113,120,131,139,142,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,233,243,245,246,248,265,266,333,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-41,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-200,-29,-94,-44,-46,-82,285,-160,]),'KEYWORD_MATCH':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,54,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,88,89,90,92,105,106,107,108,113,120,131,139,142,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,243,245,246,248,265,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,132,-47,-81,-87,-89,-61,-130,-83,-53,-24,-88,-131,-76,-51,-49,-74,-19,-22,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,]),'TYPE_STRING':([91,222,239,242,271,321,328,],[166,166,166,166,166,166,166,]),'INST':([9,38,63,75,108,199,260,320,],[-132,118,-130,-131,118,-133,118,118,]),'LSHIFT':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,129,-78,-81,-87,-89,-61,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,129,129,129,129,-79,-29,-94,-82,]),'KEYWORD_NULL':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,61,-5,61,-186,-199,-200,61,-200,61,-200,-14,-17,-200,-200,-172,61,-200,-200,-200,61,-18,-12,61,-15,-200,-200,-200,-200,61,-16,-144,-41,-9,-7,61,-140,-148,-142,61,61,-147,-200,-200,-141,61,61,61,61,61,-200,-143,-139,61,-138,61,61,61,61,61,61,61,61,61,61,-174,-185,-145,-101,-137,61,-146,61,-31,-37,-35,-30,-33,-39,-36,-38,-32,61,-34,-40,-198,61,61,61,-200,-173,-13,61,61,61,-166,-165,-200,-184,61,-167,61,61,61,-200,-151,-158,-200,-162,-161,61,-156,61,61,61,-200,-157,61,-152,61,61,-200,61,]),'MINUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,31,33,34,35,36,38,39,40,41,42,45,46,49,51,53,55,56,58,59,60,61,62,63,64,65,66,67,68,70,71,72,75,77,81,83,85,86,87,90,91,92,93,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,144,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,199,204,205,206,207,208,209,210,211,213,215,216,217,229,230,231,243,244,245,250,251,254,263,264,265,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-132,-8,24,-5,24,-186,-199,-200,-27,24,-91,-92,-200,-90,24,-200,-14,-85,-17,-26,-93,-67,-73,-200,-200,-64,-172,-78,24,-200,-200,-81,-87,-200,-89,138,-130,24,-18,-12,-83,24,-15,-84,-88,-131,-76,-200,-200,-74,-200,-200,-86,24,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,24,-140,-71,-148,-142,24,24,-28,-147,-200,-200,-141,24,24,24,24,24,-200,-77,-143,-139,24,-138,24,24,-84,-75,24,24,24,24,24,24,24,24,-174,-185,-145,-101,-137,24,-146,24,-31,-37,-35,-30,-33,-39,-36,-38,-32,24,-34,-40,-198,-133,24,24,-70,-69,-68,138,138,24,-200,-65,-66,-173,-13,24,-79,-29,24,-94,24,-166,-165,-200,-184,-82,24,-167,24,24,24,-200,-151,-158,-200,-162,-161,24,-156,24,24,24,-200,-157,24,-152,24,24,-200,24,]),'KEYWORD_OBJECT':([0,2,4,5,6,11,12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,264,279,309,311,317,340,344,],[8,8,-4,-2,-3,-1,-8,8,-5,8,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,8,-174,-185,-145,-101,-137,-146,8,-198,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'KEYWORD_RETURN':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,263,264,279,284,309,311,317,339,340,344,345,353,354,],[-8,64,-5,64,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,64,-174,-185,-145,-101,-137,-146,64,-198,-200,-173,-13,-166,-165,-200,-184,-167,64,-151,-158,-156,-200,-157,-152,64,-200,64,]),'BOOL_CONSTT':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,30,-5,30,-186,-199,-200,30,-200,30,-200,-14,-17,-200,-200,-172,30,-200,-200,-200,30,-18,-12,30,-15,-200,-200,-200,-200,30,-16,-144,-41,-9,-7,30,-140,-148,-142,30,30,-147,-200,-200,-141,30,30,30,30,30,-200,-143,-139,30,-138,30,30,30,30,30,30,30,30,30,30,-174,-185,-145,-101,-137,30,-146,30,-31,-37,-35,-30,-33,-39,-36,-38,-32,30,-34,-40,-198,30,30,30,-200,-173,-13,30,30,30,-166,-165,-200,-184,30,-167,30,30,30,-200,-151,-158,-200,-162,-161,30,-156,30,30,30,-200,-157,30,-152,30,30,-200,30,]),'GEQ':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,145,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,145,145,-79,-29,-94,-82,]),'RPAREN':([9,19,21,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,97,99,100,102,104,105,106,107,108,113,116,119,120,131,139,142,144,165,166,167,168,169,170,171,172,191,192,193,194,195,197,199,200,201,202,203,206,207,208,209,210,214,215,216,218,219,220,221,224,225,226,228,231,232,233,234,237,243,245,246,247,248,255,256,257,259,260,265,266,270,272,273,274,286,287,310,322,326,329,332,333,336,347,349,],[-132,-200,-176,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,188,-191,-189,-190,-41,-72,-80,-84,-26,-71,-200,-200,-28,-77,-24,-22,-75,-120,-123,-122,-125,230,-124,-121,231,-193,-48,-179,240,-177,-178,-133,-95,-96,245,-97,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,263,-55,-54,-52,-79,-25,-200,267,-192,-29,-94,-44,275,-46,-126,-119,-118,-127,-128,-82,-200,-116,-180,-117,-98,-159,-164,-163,-129,334,-200,339,-160,342,350,352,]),'LEQ':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,148,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,148,148,-79,-29,-94,-82,]),'OR_BITWISE':([9,23,25,27,28,30,35,38,39,40,41,46,50,51,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,120,131,139,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,243,245,248,265,],[-132,-27,-91,111,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,111,-82,]),'RBRAC':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,120,131,139,142,144,165,166,167,168,170,171,192,198,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,243,245,246,248,255,256,257,259,260,265,304,322,330,335,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-120,-123,-122,-125,-124,-121,-48,243,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-126,-119,-118,-127,-128,-82,322,-129,337,341,]),'TYPE_VOID':([91,222,239,242,271,321,328,],[168,168,168,168,291,168,168,]),'TYPE_INT':([91,222,239,242,271,283,321,328,],[165,165,165,165,165,304,165,165,]),'AND_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,180,-28,-133,-29,]),'FUNTYPE':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,120,131,139,142,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,243,245,246,248,265,278,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,296,]),'TYPE_BOOLEAN':([91,222,239,242,271,321,328,],[170,170,170,170,170,170,170,]),'KEYWORD_VAL':([12,13,14,15,16,17,19,21,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,189,213,217,229,251,254,264,279,309,311,317,340,344,],[-8,48,-5,48,-186,-199,48,-176,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,48,-174,-185,-145,-101,-137,-146,48,-198,48,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'PLUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,31,33,34,35,36,38,39,40,41,42,45,46,49,51,53,55,56,58,59,60,61,62,63,64,65,66,67,68,70,71,72,75,77,81,83,85,86,87,90,91,92,93,103,104,105,106,107,108,109,110,111,112,113,114,115,117,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,144,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,199,204,205,206,207,208,209,210,211,213,215,216,217,229,230,231,243,244,245,250,251,254,263,264,265,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-132,-8,31,-5,31,-186,-199,-200,-27,31,-91,-92,-200,-90,31,-200,-14,-85,-17,-26,-93,-67,-73,-200,-200,-64,-172,-78,31,-200,-200,-81,-87,-200,-89,137,-130,31,-18,-12,-83,31,-15,-84,-88,-131,-76,-200,-200,-74,-200,-200,-86,31,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,31,-140,-71,-148,-142,31,31,-28,-147,-200,-200,-141,31,31,31,31,31,-200,-77,-143,-139,31,-138,31,31,-84,-75,31,31,31,31,31,31,31,31,-174,-185,-145,-101,-137,31,-146,31,-31,-37,-35,-30,-33,-39,-36,-38,-32,31,-34,-40,-198,-133,31,31,-70,-69,-68,137,137,31,-200,-65,-66,-173,-13,31,-79,-29,31,-94,31,-166,-165,-200,-184,-82,31,-167,31,31,31,-200,-151,-158,-200,-162,-161,31,-156,31,31,31,-200,-157,31,-152,31,31,-200,31,]),'STRING':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,72,-5,72,-186,-199,-200,72,-200,72,-200,-14,-17,-200,-200,-172,72,-200,-200,-200,72,-18,-12,72,-15,-200,-200,-200,-200,72,-16,-144,-41,-9,-7,72,-140,-148,-142,72,72,-147,-200,-200,-141,72,72,72,72,72,-200,-143,-139,72,-138,72,72,72,72,72,72,72,72,72,72,-174,-185,-145,-101,-137,72,-146,72,-31,-37,-35,-30,-33,-39,-36,-38,-32,72,-34,-40,-198,72,72,72,-200,-173,-13,72,72,72,-166,-165,-200,-184,72,-167,72,72,72,-200,-151,-158,-200,-162,-161,72,-156,72,72,72,-200,-157,72,-152,72,72,-200,72,]),'IDENTIFIER':([1,8,12,13,14,15,16,17,19,21,22,24,29,31,33,34,36,42,45,47,48,49,53,55,56,60,64,65,66,68,70,74,76,81,83,86,87,91,93,98,101,102,103,104,109,110,111,112,114,115,116,117,118,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,185,187,189,204,205,211,213,217,222,223,229,230,238,239,241,242,244,250,251,254,263,264,268,271,279,282,284,285,290,300,309,311,312,313,314,315,317,321,324,325,328,329,339,340,343,344,345,346,353,354,],[9,18,-8,9,-5,9,-186,-199,-200,-176,-200,9,-200,9,-200,-14,-17,-200,-200,-99,-100,-172,9,-200,-200,-200,9,-18,-12,9,-15,151,152,-200,-200,-200,-200,9,-16,-194,190,-195,-144,-41,-9,-7,9,-140,-148,-142,196,9,9,9,-147,-200,-200,-141,9,9,9,9,9,-200,-143,-139,9,-138,9,9,9,9,9,9,9,9,9,9,-174,-185,-145,-101,-137,9,-146,9,-31,-37,-35,-30,-33,-39,-36,-38,-32,9,-34,-40,235,-198,-200,9,9,9,-200,-173,9,262,-13,9,-195,9,196,9,9,9,-166,-165,-200,-184,9,9,-167,9,9,9,-200,9,-151,-158,-200,-162,-161,9,-156,9,9,9,9,9,-200,-157,9,-152,9,9,-200,9,]),'KEYWORD_NEW':([282,],[300,]),'KEYWORD_WHILE':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,236,251,254,264,279,309,311,317,340,344,],[-8,44,-5,44,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,44,-174,-185,-145,-101,-137,-146,44,-198,-200,-173,-13,269,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'$end':([2,4,5,6,11,14,16,109,110,187,],[0,-4,-2,-3,-1,-5,-186,-9,-7,-198,]),'COLON':([150,151,190,196,240,262,],[222,-110,239,242,271,-109,]),'KEYWORD_ELSE':([22,42,49,55,81,86,103,104,109,110,114,121,133,159,163,213,217,251,254,276,279,305,306,307,309,323,348,351,355,],[-200,-200,-172,-200,-200,-200,-144,-41,-9,-7,-148,-147,-143,-145,-146,-200,-173,-166,-165,-42,-167,-155,-154,-200,-200,331,-200,353,-153,]),'XOR':([9,23,25,28,30,35,38,39,40,41,46,50,51,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,120,131,139,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,135,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,135,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-82,]),'KEYWORD_TO':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,120,131,139,142,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,243,245,246,248,265,289,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,313,]),'BOOL_CONSTF':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,25,-5,25,-186,-199,-200,25,-200,25,-200,-14,-17,-200,-200,-172,25,-200,-200,-200,25,-18,-12,25,-15,-200,-200,-200,-200,25,-16,-144,-41,-9,-7,25,-140,-148,-142,25,25,-147,-200,-200,-141,25,25,25,25,25,-200,-143,-139,25,-138,25,25,25,25,25,25,25,25,25,25,-174,-185,-145,-101,-137,25,-146,25,-31,-37,-35,-30,-33,-39,-36,-38,-32,25,-34,-40,-198,25,25,25,-200,-173,-13,25,25,25,-166,-165,-200,-184,25,-167,25,25,25,-200,-151,-158,-200,-162,-161,25,-156,25,25,25,-200,-157,25,-152,25,25,-200,25,]),'KEYWORD_VAR':([12,13,14,15,16,17,19,21,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,189,213,217,229,251,254,264,279,309,311,317,340,344,],[-8,47,-5,47,-186,-199,47,-176,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,47,-174,-185,-145,-101,-137,-146,47,-198,47,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'INT_NUMBER':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,39,-5,39,-186,-199,-200,39,-200,39,-200,-14,-17,-200,-200,-172,39,-200,-200,-200,39,-18,-12,39,-15,-200,-200,-200,-200,39,-16,-144,-41,-9,-7,39,-140,-148,-142,39,39,-147,-200,-200,-141,39,39,39,39,39,-200,-143,-139,39,-138,39,39,39,39,39,39,39,39,39,39,-174,-185,-145,-101,-137,39,-146,39,-31,-37,-35,-30,-33,-39,-36,-38,-32,39,-34,-40,-198,39,39,39,-200,-173,-13,39,39,39,-166,-165,-200,-184,39,-167,39,39,39,-200,-151,-158,-200,-162,-161,39,-156,39,39,39,-200,-157,39,-152,39,39,-200,39,]),'NEQUAL':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,228,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,154,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,154,-79,-29,-94,-82,]),'TIMES_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,173,-28,-133,-29,]),'TIMES':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,215,216,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,127,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,127,127,-79,-29,-94,-82,]),'LSHIFT_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,179,-28,-133,-29,]),'TYPE_DOUBLE':([91,222,239,242,271,321,328,],[171,171,171,171,171,171,171,]),'DIVIDE_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,181,-28,-133,-29,]),'TERMINATOR':([9,12,13,14,15,16,17,22,23,25,27,28,29,30,32,33,34,35,36,38,39,40,41,42,43,45,46,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,75,77,79,81,82,83,84,85,86,87,88,89,90,92,93,103,104,105,106,107,108,109,110,112,113,114,115,120,121,124,131,133,134,136,139,140,141,142,143,144,149,156,157,158,159,160,161,163,164,187,192,199,206,207,208,209,210,213,214,215,216,217,218,219,220,221,225,226,228,229,231,232,243,245,246,248,251,254,263,264,265,279,284,298,299,301,303,309,311,317,334,339,340,342,344,345,350,352,353,354,],[-132,-8,49,-5,49,-186,-199,-200,-27,-91,-45,-92,-200,-90,114,-200,-14,-85,-17,-26,-93,-67,-73,-200,-23,-200,-64,-172,-56,-78,-43,-200,-200,-47,-81,-87,-200,-89,-61,-130,-200,-18,-12,-83,-53,-15,-150,-88,-131,-76,-51,-200,160,-200,-49,-74,-200,-200,-19,-149,-86,-80,-16,-144,-41,-72,-80,-84,-26,-9,-7,-140,-71,-148,-142,-28,-147,-141,-77,-143,-139,-138,-24,-21,217,-22,-20,-75,-102,49,-174,-185,-145,-101,-137,-146,49,-198,-48,-133,-70,-69,-68,-63,-62,-200,-50,-65,-66,-173,-59,-57,-58,-60,-55,-54,-52,-13,-79,-25,-29,-94,-44,-46,-166,-165,-200,-184,-82,-167,49,-108,-104,-105,-103,-151,-158,-156,340,-200,-157,-136,-152,49,-135,-134,-200,49,]),'LPAREN':([9,10,12,13,14,15,16,17,22,24,29,31,33,34,36,37,38,42,44,45,49,53,55,56,60,63,64,65,66,68,70,75,78,81,83,86,87,91,93,94,103,104,108,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,152,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,199,204,205,211,213,217,229,230,244,250,251,254,263,264,268,269,279,282,284,285,290,308,309,311,312,313,314,315,317,320,324,325,329,337,339,340,341,343,344,345,346,353,354,],[-132,21,-8,91,-5,91,-186,-199,-200,91,-200,91,-200,-14,-17,21,119,-200,123,-200,-172,91,-200,-200,-200,-130,91,-18,-12,91,-15,-131,153,-200,-200,-200,-200,91,-16,185,-144,-41,119,-9,-7,91,-140,-148,-142,91,91,-147,-200,-200,-141,91,91,91,91,91,-200,-143,-139,91,-138,91,91,91,91,91,91,-183,91,91,91,91,-174,-185,-145,-101,-137,91,-146,91,-31,-37,-35,-30,-33,-39,-36,-38,-32,91,-34,-40,-198,-133,91,91,91,-200,-173,-13,91,91,91,-166,-165,-200,-184,91,290,-167,91,91,91,-200,324,-151,-158,-200,-162,-161,91,-156,329,91,91,91,343,-200,-157,346,91,-152,91,91,-200,91,]),'BLOCKEND':([12,13,14,15,16,17,22,26,29,33,34,36,42,45,49,55,56,60,65,66,70,73,81,83,86,87,93,96,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,187,212,213,217,227,229,251,252,253,254,264,276,279,280,281,297,309,311,317,318,327,340,344,],[-8,-200,-5,-200,-186,-199,-200,109,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-11,-200,-200,-200,-10,-16,109,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,-200,-174,-185,-145,-101,-137,-146,-198,251,-200,-173,109,-13,-166,279,-200,-165,-184,-42,-167,-200,-168,-169,-151,-158,-156,-200,-170,-157,-152,]),'KEYWORD_IF':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,263,264,279,284,309,311,317,339,340,344,345,353,354,],[-8,78,-5,78,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,78,-174,-185,-145,-101,-137,-146,78,-198,-200,-173,-13,-166,-165,-200,-184,-167,308,-151,-158,-156,-200,-157,-152,308,-200,308,]),'AND_BITWISE':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,162,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,162,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-82,]),'LBRAC':([9,38,63,75,108,199,261,302,319,],[-132,117,-130,-131,117,-133,283,321,328,]),'AND':([9,23,25,27,28,30,35,38,39,40,41,46,50,51,52,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,120,131,139,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,243,245,246,248,265,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,130,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,130,-46,-82,]),'GREATER':([9,23,25,28,30,35,38,39,40,41,46,50,51,58,59,61,62,63,67,69,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,209,210,215,216,218,219,220,221,225,226,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,-64,-56,-78,-81,-87,-89,-61,-130,-83,146,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,146,146,-79,-29,-94,-82,]),'ASOP':([9,23,38,63,75,92,120,165,166,167,168,170,171,199,243,255,256,257,258,259,260,291,292,293,322,],[-132,-27,-26,-130,-131,176,-28,-120,-123,-122,-125,-124,-121,-133,-29,-126,-119,-118,282,-127,-128,-125,-181,316,-129,]),'XOR_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,184,-28,-133,-29,]),'RSHIFT_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,174,-28,-133,-29,]),'OR_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,178,-28,-133,-29,]),'KEYWORD_DEF':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,264,279,309,311,317,340,344,],[-8,76,-5,76,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,76,-174,-185,-145,-101,-137,-146,76,-198,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'KEYWORD_ARRAY':([222,239,242,271,282,300,321,328,],[261,261,261,261,302,319,261,261,]),'KEYWORD_UNTIL':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,105,106,107,108,113,120,131,139,142,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,243,245,246,248,265,289,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-29,-94,-44,-46,-82,314,]),'KEYWORD_FOR':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,264,279,309,311,317,340,344,],[-8,94,-5,94,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,94,-174,-185,-145,-101,-137,-146,94,-198,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'TILDA':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,68,-5,68,-186,-199,-200,68,-200,68,-200,-14,-17,-200,-200,-172,68,-200,-200,-200,68,-18,-12,68,-15,-200,-200,-200,-200,68,-16,-144,-41,-9,-7,68,-140,-148,-142,68,68,-147,-200,-200,-141,68,68,68,68,68,-200,-143,-139,68,-138,68,68,68,68,68,68,68,68,68,68,-174,-185,-145,-101,-137,68,-146,68,-31,-37,-35,-30,-33,-39,-36,-38,-32,68,-34,-40,-198,68,68,68,-200,-173,-13,68,68,68,-166,-165,-200,-184,68,-167,68,68,68,-200,-151,-158,-200,-162,-161,68,-156,68,68,68,-200,-157,68,-152,68,68,-200,68,]),'BLOCKBEGIN':([3,7,12,13,14,15,16,17,18,20,22,29,33,34,36,42,45,49,55,56,60,65,66,70,80,81,83,86,87,93,95,103,104,109,110,112,114,115,121,124,132,133,134,136,156,157,158,159,160,161,163,164,186,187,188,213,217,229,249,251,254,263,264,267,275,276,277,279,284,288,294,295,296,309,311,316,317,331,338,339,340,344,345,353,354,],[12,17,-8,12,-5,12,-186,-199,-6,-187,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,158,-200,-200,-200,-200,-16,-200,-144,-41,-9,-7,-140,-148,-142,-147,-141,212,-143,-139,-138,12,-174,-185,-145,-101,-137,-146,12,12,-198,-188,-200,-173,-13,-200,-166,-165,-200,-184,-200,-200,-42,-200,-167,12,12,12,12,-171,-151,-158,-175,-156,-200,12,-200,-157,-152,12,-200,12,]),'KEYWORD_DO':([12,13,14,15,16,17,22,29,33,34,36,42,45,49,55,56,60,65,66,70,81,83,86,87,93,103,104,109,110,112,114,115,121,124,133,134,136,156,157,158,159,160,161,163,164,187,213,217,229,251,254,264,279,309,311,317,340,344,],[-8,95,-5,95,-186,-199,-200,-200,-200,-14,-17,-200,-200,-172,-200,-200,-200,-18,-12,-15,-200,-200,-200,-200,-16,-144,-41,-9,-7,-140,-148,-142,-147,-141,-143,-139,-138,95,-174,-185,-145,-101,-137,-146,95,-198,-200,-173,-13,-166,-165,-184,-167,-151,-158,-156,-157,-152,]),'PLUS_ASSIGN':([9,23,38,63,75,92,120,199,243,],[-132,-27,-26,-130,-131,183,-28,-133,-29,]),'NOT':([12,13,14,15,16,17,22,24,29,31,33,34,36,42,45,49,53,55,56,60,64,65,66,68,70,81,83,86,87,91,93,103,104,109,110,111,112,114,115,117,119,121,122,123,124,125,126,127,128,129,130,133,134,135,136,137,138,145,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,173,174,175,176,177,178,179,180,181,182,183,184,187,204,205,211,213,217,229,230,244,250,251,254,263,264,268,279,282,284,285,290,309,311,312,313,314,315,317,324,325,329,339,340,343,344,345,346,353,354,],[-8,53,-5,53,-186,-199,-200,53,-200,53,-200,-14,-17,-200,-200,-172,53,-200,-200,-200,53,-18,-12,53,-15,-200,-200,-200,-200,53,-16,-144,-41,-9,-7,53,-140,-148,-142,53,53,-147,-200,-200,-141,53,53,53,53,53,-200,-143,-139,53,-138,53,53,53,53,53,53,53,53,53,53,-174,-185,-145,-101,-137,53,-146,53,-31,-37,-35,-30,-33,-39,-36,-38,-32,53,-34,-40,-198,53,53,53,-200,-173,-13,53,53,53,-166,-165,-200,-184,53,-167,53,53,53,-200,-151,-158,-200,-162,-161,53,-156,53,53,53,-200,-157,53,-152,53,53,-200,53,]),'KEYWORD_CASE':([104,109,110,212,252,253,276,280,281,297,318,327,],[-41,-9,-7,250,250,-200,-42,-200,-168,-169,-200,-170,]),'COMMA':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,72,75,77,79,84,85,88,90,92,99,100,105,106,107,108,113,120,131,139,142,144,150,151,165,166,167,168,170,171,191,192,193,195,199,200,203,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,232,237,243,245,246,248,255,256,257,259,260,262,265,270,272,273,274,322,347,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,-23,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-88,-131,-76,-51,-49,-74,-19,-86,-80,-191,189,-72,-80,-84,-26,-71,-28,-77,-24,-22,-75,223,-110,-120,-123,-122,-125,-124,-121,-193,-48,-179,241,-133,244,-97,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-25,-192,-29,-94,-44,-46,-126,-119,-118,-127,-128,-109,-82,-116,-180,-117,-98,-129,244,]),'REMAINDER':([9,23,25,28,30,35,38,39,40,41,46,51,58,59,61,63,67,71,72,75,77,85,90,92,105,106,107,108,113,120,131,139,144,199,206,207,208,215,216,231,243,245,265,],[-132,-27,-91,-92,-90,-85,-26,-93,-67,-73,125,-78,-81,-87,-89,-130,-83,-84,-88,-131,-76,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-133,-70,-69,-68,125,125,-79,-29,-94,-82,]),'OR':([9,23,25,27,28,30,35,38,39,40,41,43,46,50,51,52,57,58,59,61,62,63,67,69,71,72,75,77,79,84,85,90,92,105,106,107,108,113,120,131,139,144,192,199,206,207,208,209,210,214,215,216,218,219,220,221,225,226,228,231,243,245,246,248,265,349,],[-132,-27,-91,-45,-92,-90,-85,-26,-93,-67,-73,122,-64,-56,-78,-43,-47,-81,-87,-89,-61,-130,-83,-53,-84,-88,-131,-76,-51,-49,-74,-86,-80,-72,-80,-84,-26,-71,-28,-77,-84,-75,-48,-133,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-79,-29,-94,-44,-46,-82,122,]),'CHOOSE':([235,],[268,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([13,15,156,164,284,345,354,],[22,22,22,22,22,22,22,]),'variable_declaration_initializer':([282,],[298,]),'switch_label':([212,252,],[249,249,]),'array_access':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'block_statements_opt':([13,15,156,],[26,96,227,]),'inclusive_or_expression':([13,15,64,91,117,119,153,156,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[27,27,27,27,27,27,27,27,27,27,27,27,248,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_statement':([13,15,156,164,],[29,29,29,29,]),'equality_expression':([13,15,64,91,111,117,119,135,153,156,162,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[79,79,79,79,79,79,79,79,79,79,228,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'statement_expression':([13,15,156,164,284,345,354,],[32,32,32,32,32,32,32,]),'for_loop':([185,],[233,]),'local_variable_declaration_statement':([13,15,156,164,],[34,34,34,34,]),'method_return_type':([271,],[293,]),'ProgramStructure':([0,],[2,]),'SingletonObject':([0,2,13,15,156,164,],[6,6,36,36,36,36,]),'method_header_name':([13,15,156,164,],[37,37,37,37,]),'class_initializer':([282,],[301,]),'array_data_type':([222,239,242,271,321,328,],[259,259,259,259,259,259,]),'int_float':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'name':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,222,230,239,242,244,250,268,271,282,284,285,300,315,321,324,325,328,329,343,345,346,354,],[38,38,108,108,108,38,108,38,108,38,38,108,108,108,108,108,108,108,108,108,108,108,108,38,108,108,38,108,38,38,108,38,108,260,108,260,260,38,38,38,260,38,38,38,320,38,260,38,38,260,38,38,38,108,38,]),'class_body_start':([7,],[15,]),'class_params':([19,],[100,]),'argument_list_opt':([119,329,],[202,336,]),'variable_declarator_id':([101,],[191,]),'for_step_opts':([266,],[286,]),'conditional_and_expression':([13,15,64,91,117,119,153,156,164,182,204,205,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[52,52,52,52,52,52,52,52,52,52,246,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'unary_expression':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[40,40,105,113,131,40,144,40,40,40,40,206,207,208,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,265,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ObjectDeclare':([0,2,13,15,156,164,],[3,3,3,3,3,3,]),'unary_expression_not_plus_minus':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'switch_statement':([13,15,156,164,284,345,354,],[42,42,42,42,42,42,42,]),'c_literal':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'valid_variable':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[92,92,106,106,106,92,106,92,106,92,92,106,106,106,106,106,106,106,106,106,106,106,106,92,106,106,92,106,92,92,106,92,106,106,92,92,92,92,92,92,92,92,92,92,92,92,106,92,]),'reference_type':([222,239,242,271,321,328,],[256,256,256,256,256,256,]),'argument_list':([119,329,343,],[200,200,347,]),'conditional_or_expression':([13,15,64,91,117,119,153,156,164,182,205,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,349,43,]),'variable_declaration_body':([74,],[149,]),'class_param_clause':([10,],[20,]),'do_while_statement':([13,15,156,164,],[45,45,45,45,]),'multiplicative_expression':([13,15,64,91,111,117,119,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[46,46,46,46,46,46,46,46,46,46,215,216,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'for_update':([185,],[234,]),'shift_expression':([13,15,64,91,111,117,119,135,145,146,147,148,153,154,155,156,162,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[50,50,50,50,50,50,50,50,218,219,220,221,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'variable_literal':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'end_scope':([26,96,227,],[110,187,264,]),'fun_params_opt':([116,],[194,]),'class_and_objects':([0,2,],[5,11,]),'assignment_operator':([92,],[182,]),'expression':([13,15,64,91,117,119,153,156,164,205,244,250,268,282,284,285,315,324,325,329,343,345,354,],[54,54,143,172,198,203,224,54,54,247,274,278,289,303,54,310,326,332,333,203,203,54,54,]),'block':([3,13,15,156,164,186,284,288,294,295,338,345,354,],[14,55,55,55,55,236,309,311,317,318,344,55,55,]),'if_then_else_statement':([13,15,156,164,],[56,56,56,56,]),'for_untilTo':([289,],[312,]),'exclusive_or_expression':([13,15,64,91,111,117,119,153,156,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[57,57,57,57,192,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'if_then_else_intermediate':([284,345,354,],[307,348,355,]),'if_then_statement':([13,15,156,164,],[60,60,60,60,]),'marker':([22,29,33,42,45,55,56,60,81,83,86,87,95,122,123,130,213,233,253,263,267,275,277,280,290,309,312,331,339,353,],[103,112,115,121,124,133,134,136,159,161,163,164,186,204,205,211,254,266,281,284,288,294,295,297,315,133,325,338,345,354,]),'additive_expression':([13,15,64,91,111,117,119,128,129,135,145,146,147,148,153,154,155,156,162,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[62,62,62,62,62,62,62,209,210,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'simple_name':([1,13,15,24,31,53,64,68,91,111,117,118,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,222,230,239,242,244,250,268,271,282,284,285,300,315,321,324,325,328,329,343,345,346,354,],[10,63,63,63,63,63,63,63,63,63,63,199,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'method_declaration':([13,15,156,164,],[65,65,65,65,]),'fun_params':([116,],[195,]),'block_statement':([13,15,156,164,],[66,66,66,229,]),'primitive_type':([91,222,239,242,271,321,328,],[169,257,257,257,257,257,257,]),'literal':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'relational_expression':([13,15,64,91,111,117,119,135,153,154,155,156,162,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[69,69,69,69,69,69,69,69,69,225,226,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'statement':([13,15,156,164,],[70,70,70,70,]),'cast_expression':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'type':([222,239,242,271,321,328,],[258,270,273,292,330,335,]),'empty':([13,15,19,22,29,33,42,45,55,56,60,64,81,83,86,87,95,116,119,122,123,130,156,189,213,233,249,253,263,266,267,275,277,280,290,307,309,312,318,329,331,339,348,353,],[73,73,102,104,104,104,104,104,104,104,104,140,104,104,104,104,104,197,201,104,104,104,73,238,104,104,276,104,104,287,104,104,104,104,104,276,104,104,276,201,104,104,276,104,]),'normal_statement':([13,15,156,164,284,345,354,],[83,83,83,83,306,306,306,]),'qualified_name':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,222,230,239,242,244,250,268,271,282,284,285,300,315,321,324,325,328,329,343,345,346,354,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'class_body':([7,],[16,]),'class_param':([19,189,],[99,237,]),'method_invocation':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[71,71,107,107,107,139,107,139,107,139,139,107,107,107,107,107,107,107,107,107,107,107,107,139,107,107,71,107,71,139,107,139,107,107,139,139,139,139,71,139,139,139,139,139,139,71,107,71,]),'class_header':([0,2,13,15,156,164,],[7,7,7,7,7,7,]),'class_declaration_keyword_opt':([19,189,],[101,101,]),'method_start_scope':([80,],[156,]),'method_header':([13,15,156,164,],[80,80,80,80,]),'empty_statement':([13,15,156,164,284,345,354,],[81,81,81,81,81,81,81,]),'local_variable_declaration':([13,15,156,164,],[82,82,82,82,]),'func_arg_start':([10,37,],[19,116,]),'if_then_else_statement_precedence':([284,345,354,],[305,305,305,]),'declaration_keyword':([13,15,19,156,164,189,],[74,74,98,74,74,98,]),'for_statement':([13,15,156,164,],[33,33,33,33,]),'fun_variable_declarator_id':([116,241,],[193,272,]),'narker':([249,307,318,348,],[277,323,327,351,]),'class_data_type':([222,239,242,271,321,328,],[255,255,255,255,255,255,]),'and_expression':([13,15,64,91,111,117,119,135,153,156,164,182,204,205,211,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[84,84,84,84,84,84,84,214,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'base_variable_set':([13,15,24,31,53,64,68,91,111,117,119,125,126,127,128,129,135,137,138,145,146,147,148,153,154,155,156,162,164,182,204,205,211,230,244,250,268,282,284,285,315,324,325,329,343,345,346,354,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'return_statement':([13,15,156,164,284,345,354,],[86,86,86,86,86,86,86,]),'switch_block_statement':([212,252,],[253,280,]),'block_statements':([13,15,156,],[87,87,87,]),'assignment_expression':([13,15,64,91,117,119,153,156,164,182,205,244,250,268,282,284,285,315,324,325,329,343,345,354,],[88,88,88,88,88,88,88,88,88,232,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'expression_optional':([64,],[141,]),'class_params_opt':([19,],[97,]),'assignment':([13,15,64,91,117,119,153,156,164,182,205,244,250,268,282,284,285,315,324,325,329,343,345,354,],[89,89,142,142,142,142,142,89,89,142,142,142,142,142,142,89,142,142,142,142,142,142,89,89,]),'method_body':([80,],[157,]),'start_scope':([3,13,15,156,164,186,284,288,294,295,338,345,354,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'array_initializer':([282,],[299,]),'identifiers':([74,],[150,]),'class_declaration':([0,2,13,15,156,164,],[4,4,93,93,93,93,]),'switch_block':([132,],[213,]),'switch_block_statements':([212,],[252,]),'dimension':([38,108,],[120,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramStructure","S'",1,None,None,None),
  ('ProgramStructure -> ProgramStructure class_and_objects','ProgramStructure',2,'p_program_structure','backpatch.py',106),
  ('ProgramStructure -> class_and_objects','ProgramStructure',1,'p_program_structure','backpatch.py',107),
  ('class_and_objects -> SingletonObject','class_and_objects',1,'p_class_and_objects','backpatch.py',114),
  ('class_and_objects -> class_declaration','class_and_objects',1,'p_class_and_objects','backpatch.py',115),
  ('SingletonObject -> ObjectDeclare block','SingletonObject',2,'p_SingletonObject','backpatch.py',119),
  ('ObjectDeclare -> KEYWORD_OBJECT IDENTIFIER','ObjectDeclare',2,'p_object_declare','backpatch.py',130),
  ('block -> start_scope block_statements_opt end_scope','block',3,'p_block','backpatch.py',137),
  ('start_scope -> BLOCKBEGIN','start_scope',1,'p_start_scope','backpatch.py',142),
  ('end_scope -> BLOCKEND','end_scope',1,'p_end_scope','backpatch.py',153),
  ('block_statements_opt -> block_statements','block_statements_opt',1,'p_block_statements_opt','backpatch.py',163),
  ('block_statements_opt -> empty','block_statements_opt',1,'p_block_statements_opt','backpatch.py',164),
  ('block_statements -> block_statement','block_statements',1,'p_block_statements','backpatch.py',169),
  ('block_statements -> block_statements marker block_statement','block_statements',3,'p_block_statements','backpatch.py',170),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block_statement','backpatch.py',180),
  ('block_statement -> statement','block_statement',1,'p_block_statement','backpatch.py',181),
  ('block_statement -> class_declaration','block_statement',1,'p_block_statement','backpatch.py',182),
  ('block_statement -> SingletonObject','block_statement',1,'p_block_statement','backpatch.py',183),
  ('block_statement -> method_declaration','block_statement',1,'p_block_statement','backpatch.py',184),
  ('expression -> assignment_expression','expression',1,'p_expression','backpatch.py',190),
  ('expression_optional -> expression','expression_optional',1,'p_expression_optional','backpatch.py',198),
  ('expression_optional -> empty','expression_optional',1,'p_expression_optional','backpatch.py',199),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','backpatch.py',205),
  ('assignment_expression -> conditional_or_expression','assignment_expression',1,'p_assignment_expression','backpatch.py',206),
  ('assignment_expression -> method_invocation','assignment_expression',1,'p_assignment_expression','backpatch.py',207),
  ('assignment -> valid_variable assignment_operator assignment_expression','assignment',3,'p_assignment','backpatch.py',223),
  ('valid_variable -> name','valid_variable',1,'p_valid_variable','backpatch.py',232),
  ('valid_variable -> array_access','valid_variable',1,'p_valid_variable1','backpatch.py',240),
  ('array_access -> name dimension','array_access',2,'p_array_access','backpatch.py',244),
  ('dimension -> LBRAC expression RBRAC','dimension',3,'p_dimension','backpatch.py',251),
  ('assignment_operator -> ASOP','assignment_operator',1,'p_assignment_operator','backpatch.py',258),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',259),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',260),
  ('assignment_operator -> REMAINDER_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',261),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',262),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',263),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',264),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',265),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',266),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',267),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',268),
  ('marker -> empty','marker',1,'p_marker','backpatch.py',277),
  ('narker -> empty','narker',1,'p_narker','backpatch.py',282),
  ('conditional_or_expression -> conditional_and_expression','conditional_or_expression',1,'p_conditional_or_expression','backpatch.py',289),
  ('conditional_or_expression -> conditional_or_expression OR marker conditional_and_expression','conditional_or_expression',4,'p_conditional_or_expression','backpatch.py',290),
  ('conditional_and_expression -> inclusive_or_expression','conditional_and_expression',1,'p_conditional_and_expression','backpatch.py',307),
  ('conditional_and_expression -> conditional_and_expression AND marker inclusive_or_expression','conditional_and_expression',4,'p_conditional_and_expression','backpatch.py',308),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','backpatch.py',322),
  ('inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','backpatch.py',323),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','backpatch.py',336),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','backpatch.py',337),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','backpatch.py',350),
  ('and_expression -> and_expression AND_BITWISE equality_expression','and_expression',3,'p_and_expression','backpatch.py',351),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','backpatch.py',364),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',365),
  ('equality_expression -> equality_expression NEQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',366),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','backpatch.py',382),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',383),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',384),
  ('relational_expression -> relational_expression GEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',385),
  ('relational_expression -> relational_expression LEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',386),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','backpatch.py',403),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',404),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',405),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','backpatch.py',419),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',420),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',421),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','backpatch.py',434),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',435),
  ('multiplicative_expression -> multiplicative_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',436),
  ('multiplicative_expression -> multiplicative_expression REMAINDER unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',437),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',450),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',451),
  ('unary_expression -> unary_expression_not_plus_minus','unary_expression',1,'p_unary_expression','backpatch.py',452),
  ('unary_expression_not_plus_minus -> base_variable_set','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','backpatch.py',466),
  ('unary_expression_not_plus_minus -> TILDA unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus','backpatch.py',467),
  ('unary_expression_not_plus_minus -> cast_expression','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','backpatch.py',468),
  ('unary_expression_not_plus_minus -> NOT unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus1','backpatch.py',483),
  ('base_variable_set -> variable_literal','base_variable_set',1,'p_base_variable_set','backpatch.py',490),
  ('base_variable_set -> LPAREN expression RPAREN','base_variable_set',3,'p_base_variable_set','backpatch.py',491),
  ('variable_literal -> valid_variable','variable_literal',1,'p_variableliteral','backpatch.py',505),
  ('variable_literal -> primary','variable_literal',1,'p_variableliteral','backpatch.py',506),
  ('cast_expression -> LPAREN primitive_type RPAREN unary_expression','cast_expression',4,'p_cast_expression','backpatch.py',514),
  ('primary -> literal','primary',1,'p_primary','backpatch.py',522),
  ('primary -> method_invocation','primary',1,'p_primary','backpatch.py',523),
  ('literal -> int_float','literal',1,'p_literal','backpatch.py',530),
  ('literal -> c_literal','literal',1,'p_literal','backpatch.py',531),
  ('c_literal -> CHAR','c_literal',1,'p_c_literal','backpatch.py',540),
  ('c_literal -> STRING','c_literal',1,'p_c_literal','backpatch.py',541),
  ('c_literal -> KEYWORD_NULL','c_literal',1,'p_c_literal','backpatch.py',542),
  ('c_literal -> BOOL_CONSTT','c_literal',1,'p_c_literal_binary_true','backpatch.py',549),
  ('c_literal -> BOOL_CONSTF','c_literal',1,'p_c_literal_binary_false','backpatch.py',558),
  ('int_float -> DOUBLE_NUMBER','int_float',1,'p_int_float','backpatch.py',566),
  ('int_float -> INT_NUMBER','int_float',1,'p_int_float','backpatch.py',567),
  ('method_invocation -> name LPAREN argument_list_opt RPAREN','method_invocation',4,'p_method_invocation','backpatch.py',577),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt','backpatch.py',593),
  ('argument_list_opt -> empty','argument_list_opt',1,'p_argument_list_opt2','backpatch.py',598),
  ('argument_list -> expression','argument_list',1,'p_argument_list','backpatch.py',602),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','backpatch.py',603),
  ('declaration_keyword -> KEYWORD_VAR','declaration_keyword',1,'p_declaration_keyword','backpatch.py',615),
  ('declaration_keyword -> KEYWORD_VAL','declaration_keyword',1,'p_declaration_keyword','backpatch.py',616),
  ('local_variable_declaration_statement -> local_variable_declaration TERMINATOR','local_variable_declaration_statement',2,'p_local_variable_declaration_statement','backpatch.py',622),
  ('local_variable_declaration -> declaration_keyword variable_declaration_body','local_variable_declaration',2,'p_local_variable_declaration','backpatch.py',627),
  ('variable_declaration_initializer -> expression','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',631),
  ('variable_declaration_initializer -> array_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',632),
  ('variable_declaration_initializer -> class_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',633),
  ('variable_argument_list -> variable_declaration_initializer','variable_argument_list',1,'p_variable_argument_list','backpatch.py',639),
  ('variable_argument_list -> variable_argument_list COMMA variable_declaration_initializer','variable_argument_list',3,'p_variable_argument_list','backpatch.py',640),
  ('variable_declaration_body -> identifiers COLON type ASOP variable_declaration_initializer','variable_declaration_body',5,'p_variable_declaration_body_1','backpatch.py',648),
  ('identifiers -> identifiers COMMA IDENTIFIER','identifiers',3,'p_identifiers','backpatch.py',673),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','backpatch.py',674),
  ('variable_list -> variable_declarator_id','variable_list',1,'p_variable_list','backpatch.py',696),
  ('variable_list -> variable_list COMMA variable_declarator_id','variable_list',3,'p_variable_list','backpatch.py',697),
  ('variable_dec -> IDENTIFIER type_opt','variable_dec',2,'p_variable_dec','backpatch.py',705),
  ('expr_opt -> ASOP variable_declaration_initializer','expr_opt',2,'p_expr_opt','backpatch.py',720),
  ('expr_opt -> empty','expr_opt',1,'p_expr_opt','backpatch.py',721),
  ('variable_declarator_id -> IDENTIFIER COLON type','variable_declarator_id',3,'p_variable_declarator_id','backpatch.py',730),
  ('fun_variable_declarator_id -> IDENTIFIER COLON type','fun_variable_declarator_id',3,'p_fun_variable_declarator_id','backpatch.py',737),
  ('type -> primitive_type','type',1,'p_type','backpatch.py',751),
  ('type -> reference_type','type',1,'p_type','backpatch.py',752),
  ('primitive_type -> TYPE_INT','primitive_type',1,'p_primitive_type','backpatch.py',757),
  ('primitive_type -> TYPE_DOUBLE','primitive_type',1,'p_primitive_type','backpatch.py',758),
  ('primitive_type -> TYPE_CHAR','primitive_type',1,'p_primitive_type','backpatch.py',759),
  ('primitive_type -> TYPE_STRING','primitive_type',1,'p_primitive_type','backpatch.py',760),
  ('primitive_type -> TYPE_BOOLEAN','primitive_type',1,'p_primitive_type','backpatch.py',761),
  ('primitive_type -> TYPE_VOID','primitive_type',1,'p_primitive_type','backpatch.py',762),
  ('reference_type -> class_data_type','reference_type',1,'p_reference_type','backpatch.py',768),
  ('reference_type -> array_data_type','reference_type',1,'p_reference_type','backpatch.py',769),
  ('class_data_type -> name','class_data_type',1,'p_class_data_type','backpatch.py',774),
  ('array_data_type -> KEYWORD_ARRAY LBRAC TYPE_INT RBRAC','array_data_type',4,'p_array_data_type','backpatch.py',778),
  ('name -> simple_name','name',1,'p_name','backpatch.py',789),
  ('name -> qualified_name','name',1,'p_name','backpatch.py',790),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','backpatch.py',797),
  ('qualified_name -> name INST simple_name','qualified_name',3,'p_qualified_name','backpatch.py',804),
  ('array_initializer -> KEYWORD_NEW KEYWORD_ARRAY LBRAC type RBRAC LPAREN conditional_or_expression RPAREN','array_initializer',8,'p_array_initializer','backpatch.py',813),
  ('array_initializer -> KEYWORD_ARRAY LBRAC type RBRAC LPAREN argument_list RPAREN','array_initializer',7,'p_array_initializer','backpatch.py',814),
  ('class_initializer -> KEYWORD_NEW name LPAREN argument_list_opt RPAREN','class_initializer',5,'p_class_initializer','backpatch.py',844),
  ('statement -> normal_statement marker','statement',2,'p_statement','backpatch.py',855),
  ('statement -> if_then_statement marker','statement',2,'p_statement','backpatch.py',856),
  ('statement -> if_then_else_statement marker','statement',2,'p_statement','backpatch.py',857),
  ('statement -> while_statement marker','statement',2,'p_statement','backpatch.py',858),
  ('statement -> do_while_statement marker','statement',2,'p_statement','backpatch.py',859),
  ('statement -> for_statement marker','statement',2,'p_statement','backpatch.py',860),
  ('normal_statement -> block marker','normal_statement',2,'p_normal_statement','backpatch.py',865),
  ('normal_statement -> expression_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',866),
  ('normal_statement -> empty_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',867),
  ('normal_statement -> return_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',868),
  ('normal_statement -> switch_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',869),
  ('expression_statement -> statement_expression TERMINATOR','expression_statement',2,'p_expression_statement','backpatch.py',875),
  ('statement_expression -> assignment','statement_expression',1,'p_statement_expression','backpatch.py',881),
  ('statement_expression -> method_invocation','statement_expression',1,'p_statement_expression','backpatch.py',882),
  ('if_then_statement -> KEYWORD_IF LPAREN expression RPAREN marker block','if_then_statement',6,'p_if_then_statement','backpatch.py',890),
  ('if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker block','if_then_else_statement',10,'p_if_then_else_statement','backpatch.py',899),
  ('if_then_else_statement_precedence -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker if_then_else_intermediate','if_then_else_statement_precedence',10,'p_if_then_else_statement_precedence','backpatch.py',911),
  ('if_then_else_intermediate -> normal_statement','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',923),
  ('if_then_else_intermediate -> if_then_else_statement_precedence','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',924),
  ('while_statement -> KEYWORD_WHILE LPAREN marker expression RPAREN marker block','while_statement',7,'p_while_statement','backpatch.py',930),
  ('do_while_statement -> KEYWORD_DO marker block KEYWORD_WHILE LPAREN marker expression RPAREN TERMINATOR','do_while_statement',9,'p_do_while_statement','backpatch.py',942),
  ('for_statement -> KEYWORD_FOR LPAREN for_update RPAREN marker block','for_statement',6,'p_for_statement','backpatch.py',955),
  ('for_update -> for_loop marker for_step_opts','for_update',3,'p_for_update','backpatch.py',966),
  ('for_loop -> IDENTIFIER CHOOSE expression for_untilTo marker expression','for_loop',6,'p_for_loop','backpatch.py',976),
  ('for_untilTo -> KEYWORD_UNTIL','for_untilTo',1,'p_for_untilTo1','backpatch.py',992),
  ('for_untilTo -> KEYWORD_TO','for_untilTo',1,'p_for_untilTo2','backpatch.py',999),
  ('for_step_opts -> KEYWORD_BY expression','for_step_opts',2,'p_for_step_opts','backpatch.py',1006),
  ('for_step_opts -> empty','for_step_opts',1,'p_for_step_opts','backpatch.py',1007),
  ('switch_statement -> expression KEYWORD_MATCH switch_block marker','switch_statement',4,'p_switch_statement','backpatch.py',1017),
  ('switch_block -> BLOCKBEGIN BLOCKEND','switch_block',2,'p_switch_block','backpatch.py',1030),
  ('switch_block -> BLOCKBEGIN switch_block_statements BLOCKEND','switch_block',3,'p_switch_block2','backpatch.py',1037),
  ('switch_block_statements -> switch_block_statement marker','switch_block_statements',2,'p_switch_block_statements','backpatch.py',1046),
  ('switch_block_statements -> switch_block_statements switch_block_statement marker','switch_block_statements',3,'p_switch_block_statements','backpatch.py',1047),
  ('switch_block_statement -> switch_label narker marker block narker','switch_block_statement',5,'p_switch_block_statement','backpatch.py',1063),
  ('switch_label -> KEYWORD_CASE expression FUNTYPE','switch_label',3,'p_switch_label','backpatch.py',1071),
  ('empty_statement -> TERMINATOR','empty_statement',1,'p_empty_statement','backpatch.py',1080),
  ('return_statement -> KEYWORD_RETURN expression_optional TERMINATOR','return_statement',3,'p_return_statement','backpatch.py',1086),
  ('method_declaration -> method_header method_body','method_declaration',2,'p_method_declaration','backpatch.py',1103),
  ('method_header -> method_header_name func_arg_start fun_params_opt RPAREN COLON method_return_type ASOP','method_header',7,'p_method_header','backpatch.py',1108),
  ('func_arg_start -> LPAREN','func_arg_start',1,'p_func_arg_start','backpatch.py',1123),
  ('fun_params_opt -> fun_params','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1133),
  ('fun_params_opt -> empty','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1134),
  ('fun_params -> fun_variable_declarator_id','fun_params',1,'p_fun_params','backpatch.py',1139),
  ('fun_params -> fun_params COMMA fun_variable_declarator_id','fun_params',3,'p_fun_params','backpatch.py',1140),
  ('method_return_type -> type','method_return_type',1,'p_method_return_type','backpatch.py',1149),
  ('method_return_type -> TYPE_VOID','method_return_type',1,'p_method_return_type1','backpatch.py',1154),
  ('method_header_name -> KEYWORD_DEF IDENTIFIER','method_header_name',2,'p_method_header_name','backpatch.py',1159),
  ('method_body -> method_start_scope block_statements_opt end_scope','method_body',3,'p_method_body','backpatch.py',1174),
  ('method_start_scope -> BLOCKBEGIN','method_start_scope',1,'p_method_start_scope','backpatch.py',1179),
  ('class_declaration -> class_header class_body','class_declaration',2,'p_class_declaration','backpatch.py',1188),
  ('class_header -> KEYWORD_CLASS simple_name class_param_clause','class_header',3,'p_class_header','backpatch.py',1193),
  ('class_param_clause -> func_arg_start class_params_opt RPAREN','class_param_clause',3,'p_class_param_clause','backpatch.py',1205),
  ('class_params_opt -> class_params','class_params_opt',1,'p_class_param_opt','backpatch.py',1211),
  ('class_params_opt -> empty','class_params_opt',1,'p_class_param_opt','backpatch.py',1212),
  ('class_params -> class_param','class_params',1,'p_class_params','backpatch.py',1217),
  ('class_params -> class_params COMMA class_param','class_params',3,'p_class_params','backpatch.py',1218),
  ('class_param -> class_declaration_keyword_opt variable_declarator_id','class_param',2,'p_class_param','backpatch.py',1227),
  ('class_declaration_keyword_opt -> declaration_keyword','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt1','backpatch.py',1232),
  ('class_declaration_keyword_opt -> empty','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt2','backpatch.py',1236),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','backpatch.py',1240),
  ('type_opt -> empty','type_opt',1,'p_type_opt','backpatch.py',1241),
  ('class_body -> class_body_start block_statements_opt end_scope','class_body',3,'p_class_body','backpatch.py',1249),
  ('class_body_start -> BLOCKBEGIN','class_body_start',1,'p_class_body_start','backpatch.py',1255),
  ('empty -> <empty>','empty',0,'p_empty','backpatch.py',1263),
]

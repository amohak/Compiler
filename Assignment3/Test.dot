<!DOCTYPE html>
<html>
<body>
ProgramStructure -->  class_and_objects  
class_and_objects -->  SingletonObject  
SingletonObject -->  ObjectDeclare  block  
block -->  BLOCK_BEGIN  block_statements_opt  BLOCK_END  
BLOCK_END -->  }  
block_statements_opt -->  block_statement  
block_statement -->  block_statement  
block_statement -->  method_declaration  
method_declaration -->  method_header  method_body  
method_body -->  block  
block -->  BLOCK_BEGIN  block_statements_opt  BLOCK_END  
BLOCK_END -->  }  
block_statements_opt -->  block_statement  
block_statement -->  block_statement  block_statement  
block_statement -->  statement  
statement -->  normal_statement  
normal_statement -->  expression_statement  
expression_statement -->  statement_expression  STATE_END  
STATE_END -->  ;  
statement_expression -->  assignment  
assignment -->  valid_variable  assignment_operator  assignment_expression  
assignment_expression -->  conditional_or_expression  
conditional_or_expression -->  conditional_and_expression  
conditional_and_expression -->  inclusive_or_expression  
inclusive_or_expression -->  exclusive_or_expression  
exclusive_or_expression -->  and_expression  
and_expression -->  relational_expression  
relational_expression -->  relational_expression  
relational_expression -->  shift_expression  
shift_expression -->  additive_expression  
additive_expression -->  additive_expression  AddOp  multiplicative_expression  
multiplicative_expression -->  unary_expression  
unary_expression -->  unary_expression_not_plus_minus  
unary_expression_not_plus_minus -->  base_variable_set  
base_variable_set -->  variable_literal  
variable_literal -->  primary  
primary -->  literal  
literal -->  int_float  
int_float -->  IntFloatConst  
IntFloatConst -->  1  
AddOp -->  +  
additive_expression -->  multiplicative_expression  
multiplicative_expression -->  unary_expression  
unary_expression -->  unary_expression_not_plus_minus  
unary_expression_not_plus_minus -->  base_variable_set  
base_variable_set -->  variable_literal  
variable_literal -->  valid_variable  
valid_variable -->  name  
name -->  simple_name  
simple_name -->  IDENTIFIER  
IDENTIFIER -->  y  
assignment_operator -->  ASSIGN_OP  
ASSIGN_OP -->  =  
valid_variable -->  name  
name -->  simple_name  
simple_name -->  IDENTIFIER  
IDENTIFIER -->  x  
block_statement -->  block_statement  block_statement  
block_statement -->  local_variable_declaration_statement  
local_variable_declaration_statement -->  local_variable_declaration  STATE_END  
STATE_END -->  ;  
local_variable_declaration -->  modifier_opts  declaration_keyword  variable_declaration_body  
variable_declaration_body -->  variable_declarator  ASSIGN  variable_declaration_initializer  
variable_declaration_initializer -->  expression  
expression -->  assignment_expression  
assignment_expression -->  conditional_or_expression  
conditional_or_expression -->  conditional_and_expression  
conditional_and_expression -->  inclusive_or_expression  
inclusive_or_expression -->  exclusive_or_expression  
exclusive_or_expression -->  and_expression  
and_expression -->  relational_expression  
relational_expression -->  relational_expression  
relational_expression -->  shift_expression  
shift_expression -->  additive_expression  
additive_expression -->  multiplicative_expression  
multiplicative_expression -->  unary_expression  
unary_expression -->  unary_expression_not_plus_minus  
unary_expression_not_plus_minus -->  base_variable_set  
base_variable_set -->  variable_literal  
variable_literal -->  primary  
primary -->  literal  
literal -->  int_float  
int_float -->  IntFloatConst  
IntFloatConst -->  5  
ASSIGN -->  =  
variable_declarator -->  variable_declarator_id  
variable_declarator_id -->  IDENTIFIER  COLON  type  
type -->  primitive_type  
primitive_type -->  TYPE  
TYPE -->  Int  
COLON -->  :  
IDENTIFIER -->  y  
declaration_keyword -->  KEYWORD VAR/VAL  
KEYWORD VAR/VAL -->  val  
modifier_opts -->  empty  
empty -->  empty  
empty -->  NOP  
block_statement -->  block_statement  
block_statement -->  local_variable_declaration_statement  
local_variable_declaration_statement -->  local_variable_declaration  STATE_END  
STATE_END -->  ;  
local_variable_declaration -->  modifier_opts  declaration_keyword  variable_declaration_body  
variable_declaration_body -->  variable_declarator  ASSIGN  variable_declaration_initializer  
variable_declaration_initializer -->  expression  
expression -->  assignment_expression  
assignment_expression -->  conditional_or_expression  
conditional_or_expression -->  conditional_and_expression  
conditional_and_expression -->  inclusive_or_expression  
inclusive_or_expression -->  exclusive_or_expression  
exclusive_or_expression -->  and_expression  
and_expression -->  relational_expression  
relational_expression -->  relational_expression  
relational_expression -->  shift_expression  
shift_expression -->  additive_expression  
additive_expression -->  multiplicative_expression  
multiplicative_expression -->  unary_expression  
unary_expression -->  unary_expression_not_plus_minus  
unary_expression_not_plus_minus -->  base_variable_set  
base_variable_set -->  variable_literal  
variable_literal -->  primary  
primary -->  literal  
literal -->  int_float  
int_float -->  IntFloatConst  
IntFloatConst -->  4  
ASSIGN -->  =  
variable_declarator -->  variable_declarator_id  
variable_declarator_id -->  IDENTIFIER  COLON  type  
type -->  primitive_type  
primitive_type -->  TYPE  
TYPE -->  Int  
COLON -->  :  
IDENTIFIER -->  x  
declaration_keyword -->  KEYWORD VAR/VAL  
KEYWORD VAR/VAL -->  val  
modifier_opts -->  empty  
empty -->  empty  
empty -->  NOP  
BLOCK_BEGIN -->  {  
method_header -->  method_header_name  LPAREN  func_arguement_list_opt  RPAREN  COLON  method_return_type  ASSIGN  
ASSIGN -->  =  
method_return_type -->  type  
type -->  primitive_type  
primitive_type -->  TYPE  
TYPE -->  String  
COLON -->  :  
RPAREN -->  )  
func_arguement_list_opt -->  variable_declarators  
variable_declarators -->  variable_declarator  
variable_declarator -->  variable_declarator_id  
variable_declarator_id -->  IDENTIFIER  COLON  type  
type -->  reference_type  
reference_type -->  array_data_type  
array_data_type -->  ARRAY  LBPAREN  type  RBPAREN  
RBPAREN -->  ]  
type -->  primitive_type  
primitive_type -->  TYPE  
TYPE -->  String  
LBPAREN -->  [  
ARRAY -->  Array  
COLON -->  :  
IDENTIFIER -->  args  
LPAREN -->  (  
method_header_name -->  modifier_opts  DEF  IDENTIFIER  
IDENTIFIER -->  main  
DEF -->  def  
modifier_opts -->  empty  
empty -->  empty  
empty -->  NOP  
BLOCK_BEGIN -->  {  
ObjectDeclare -->  KWRD_OBJECT  IDENTIFIER  
IDENTIFIER -->  Test  
KWRD_OBJECT -->  object  
</body>
</html>

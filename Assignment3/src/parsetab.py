
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1BE32D5922C47A9789A1E433EFD66A49'
    
_lr_action_items = {'DIVIDE':([29,31,34,43,75,76,78,79,80,83,85,86,88,92,93,94,98,100,101,104,107,108,109,111,138,139,140,144,145,168,184,205,206,207,208,209,211,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-71,-62,-73,-75,152,-66,-69,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-55,-54,-53,152,152,-64,-26,-79,-67,]),'TYPE_STRING':([103,194,220,246,267,287,],[157,157,157,157,157,157,]),'RSHIFT':([29,31,34,43,75,76,78,79,80,83,85,86,88,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-71,-62,-73,-75,-49,-66,-46,-69,163,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,163,163,163,163,-55,-54,-53,-50,-51,-64,-48,-47,-26,-79,-67,]),'TYPE_CHAR':([103,194,220,246,267,287,],[158,158,158,158,158,158,]),'RBRAC':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,156,157,158,160,161,168,169,183,184,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,235,236,238,239,241,243,282,293,295,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-106,-109,-108,-110,-107,-61,-23,225,-118,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-113,-105,-104,-111,-112,-67,293,-114,302,]),'DOUBLE_NUMBER':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[76,76,76,76,76,76,-27,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-148,-147,76,76,76,76,]),'KEYWORD_CLASS':([0,4,6,7,8,9,11,12,13,14,15,16,23,24,25,27,28,30,36,37,38,39,40,44,46,47,48,49,51,52,55,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[-174,-4,-87,-174,-3,-85,26,-84,-2,-86,-174,-5,-1,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,-87,-174,-127,-13,-126,-151,-16,26,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'EQUAL':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,111,138,139,140,144,145,168,184,198,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,166,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,166,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-26,-79,-67,]),'FUNTYPE':([291,],[300,]),'CHAR':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[79,79,79,79,79,79,-27,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-148,-147,79,79,79,79,]),'KEYWORD_BY':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,168,169,184,189,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,243,292,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-61,-23,-118,228,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-67,-146,]),'COLON':([132,175,181,219,],[194,220,220,246,]),'INST':([29,34,43,56,73,74,107,140,184,235,275,],[-115,-116,-117,125,125,125,125,125,-118,125,125,]),'LSHIFT':([29,31,34,43,75,76,78,79,80,83,85,86,88,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-71,-62,-73,-75,-49,-66,-46,-69,164,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,164,164,164,164,-55,-54,-53,-50,-51,-64,-48,-47,-26,-79,-67,]),'KEYWORD_NULL':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[78,78,78,78,78,78,-27,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-148,-147,78,78,78,78,]),'KEYWORD_PRIVATE':([0,4,7,8,13,15,16,23,24,25,27,28,30,36,37,38,39,40,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[9,-4,9,-3,-2,9,-5,-1,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,9,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'KEYWORD_OBJECT':([0,4,7,8,13,15,16,23,24,25,27,28,30,36,37,38,39,40,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[3,-4,3,-3,-2,3,-5,-1,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,3,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'KEYWORD_RETURN':([15,16,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,221,231,234,249,251,263,266,272,283,285,294,307,],[32,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,32,32,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,32,32,32,-122,-135,-142,-140,32,-141,-136,32,32,]),'BOOL_CONSTF':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[98,98,98,98,98,98,-27,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-148,-147,98,98,98,98,]),'GEQ':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,146,-71,-62,-73,-75,-49,-66,-46,-69,-41,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,146,146,-26,-79,-67,]),'RPAREN':([17,29,31,34,43,67,69,70,71,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,120,126,136,138,139,140,144,145,156,157,158,159,160,161,162,168,169,171,172,173,174,176,177,184,185,186,187,188,189,190,191,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,223,225,227,229,230,235,236,238,239,240,241,243,244,245,247,254,256,258,260,261,262,264,276,278,286,288,289,292,293,296,297,298,299,303,309,311,312,],[-174,-115,-25,-116,-117,-160,134,-162,-161,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-174,-174,-174,-57,-65,-24,-60,-56,-106,-109,-108,210,-110,-107,211,-61,-23,-102,-171,219,-100,-172,221,-118,-80,-81,227,-82,-174,231,-143,234,-163,242,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,259,-26,-79,-145,-150,-113,-105,-104,-111,-164,-112,-67,268,-101,-103,-93,-94,-92,-174,-83,-149,-144,-174,291,294,-174,297,-146,-114,303,-120,-95,304,-121,-96,312,-119,]),'LEQ':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,149,-71,-62,-73,-75,-49,-66,-46,-69,-41,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,149,149,-26,-79,-67,]),'OR_BITWISE':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,111,138,139,140,144,145,168,184,197,198,199,200,201,202,203,205,206,207,208,209,211,212,213,214,215,216,225,227,243,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,143,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,-36,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-35,-37,-33,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,143,-26,-79,-67,]),'LESS':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,148,-71,-62,-73,-75,-49,-66,-46,-69,-41,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,148,148,-26,-79,-67,]),'TYPE_VOID':([246,],[269,]),'TYPE_INT':([103,194,220,246,267,287,],[156,156,156,156,156,156,]),'MINUS':([29,31,32,34,43,75,76,78,79,80,81,83,85,86,88,89,90,92,93,94,98,100,101,102,103,104,107,108,109,111,112,115,116,121,124,126,130,137,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,168,184,205,206,207,208,209,210,211,212,213,217,222,225,226,227,228,233,243,273,276,279,280,281,288,290,300,305,],[-115,-25,81,-116,-117,-52,-77,-76,-72,-58,81,-74,-59,-65,-68,81,81,-71,-62,-73,-75,-49,-66,155,81,-69,-24,-70,-63,-78,81,-27,81,81,81,81,81,81,-57,-65,-24,81,81,-60,-56,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-61,-118,-55,-54,-53,-50,-51,81,-64,155,155,81,81,-26,81,-79,81,81,-67,81,81,81,-148,-147,81,81,81,81,]),'BOOL_CONSTT':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[83,83,83,83,83,83,-27,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-148,-147,83,83,83,83,]),'PLUS':([29,31,32,34,43,75,76,78,79,80,81,83,85,86,88,89,90,92,93,94,98,100,101,102,103,104,107,108,109,111,112,115,116,121,124,126,130,137,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,168,184,205,206,207,208,209,210,211,212,213,217,222,225,226,227,228,233,243,273,276,279,280,281,288,290,300,305,],[-115,-25,90,-116,-117,-52,-77,-76,-72,-58,90,-74,-59,-65,-68,90,90,-71,-62,-73,-75,-49,-66,154,90,-69,-24,-70,-63,-78,90,-27,90,90,90,90,90,90,-57,-65,-24,90,90,-60,-56,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-61,-118,-55,-54,-53,-50,-51,90,-64,154,154,90,90,-26,90,-79,90,90,-67,90,90,90,-148,-147,90,90,90,90,]),'TYPE_BOOLEAN':([103,194,220,246,267,287,],[160,160,160,160,160,160,]),'COMMA':([29,31,34,43,67,70,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,156,157,158,160,161,168,169,171,172,174,184,185,188,195,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,223,225,227,235,236,238,239,240,241,243,245,247,254,256,258,261,293,297,298,299,303,309,312,],[-115,-25,-116,-117,133,-162,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-106,-109,-108,-110,-107,-61,-23,-102,218,-100,-118,226,-82,-163,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,218,-26,-79,-113,-105,-104,-111,-164,-112,-67,-101,-103,-93,-94,-92,-83,-114,-120,-95,305,-121,-96,-119,]),'STRING':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[94,94,94,94,94,94,-27,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-148,-147,94,94,94,94,]),'IDENTIFIER':([3,15,16,21,24,25,26,27,28,30,32,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,65,66,68,72,81,89,90,103,112,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,136,137,141,142,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,180,194,210,217,218,220,221,222,226,228,231,232,233,234,246,249,251,255,260,263,266,267,272,273,276,279,280,281,283,285,287,288,290,294,300,305,307,],[18,43,-5,43,-153,-165,43,-129,-122,-123,43,-17,-11,-131,-125,-14,43,43,-127,-13,-126,-151,-16,-130,-15,-128,-124,-88,132,-89,135,43,43,43,43,43,-8,-27,43,-132,-12,175,43,181,182,43,43,43,-166,-173,192,43,-90,175,43,43,-152,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,175,43,43,43,175,43,43,43,43,43,43,192,43,43,43,-122,-135,43,175,-142,-140,43,43,43,43,43,-148,-147,-141,-136,43,43,43,43,43,43,43,]),'KEYWORD_NEW':([222,290,305,],[255,255,255,]),'KEYWORD_WHILE':([15,16,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,114,117,118,119,127,128,131,142,221,231,234,249,251,263,266,272,283,285,294,307,],[61,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,61,61,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,170,-12,-166,-173,-90,-152,61,61,61,-122,-135,-142,-140,61,-141,-136,61,61,]),'$end':([4,7,8,13,16,23,24,25,114,],[-4,0,-3,-2,-5,-1,-153,-165,-8,]),'KEYWORD_ELSE':([27,38,51,58,63,114,117,142,248,249,250,301,310,],[-129,-131,-151,-130,-128,-8,-132,-152,-139,-138,272,307,-137,]),'XOR':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,111,138,139,140,144,145,168,184,197,198,199,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,137,-76,-72,-58,-34,-74,-59,-65,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,-36,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-35,-37,137,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-26,-79,-67,]),'KEYWORD_TO':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,168,169,184,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,243,265,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-61,-23,-118,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-67,280,]),'NEQUAL':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,111,138,139,140,144,145,168,184,198,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,165,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,165,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-26,-79,-67,]),'INT_NUMBER':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,308,],[111,111,111,111,111,111,-27,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-148,-147,111,111,111,111,311,]),'KEYWORD_VAR':([6,9,12,14,15,16,17,24,25,27,28,30,36,37,38,39,40,44,46,47,48,49,51,52,55,58,59,63,64,114,117,119,127,128,131,133,142,249,251,263,266,283,285,],[-87,-85,-84,-86,-174,-5,65,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,-87,-174,-127,-13,-126,-151,-16,65,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,65,-152,-122,-135,-142,-140,-141,-136,]),'TIMES':([29,31,34,43,75,76,78,79,80,83,85,86,88,92,93,94,98,100,101,104,107,108,109,111,138,139,140,144,145,168,184,205,206,207,208,209,211,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-71,-62,-73,-75,153,-66,-69,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-55,-54,-53,153,153,-64,-26,-79,-67,]),'KEYWORD_VAL':([6,9,12,14,15,16,17,24,25,27,28,30,36,37,38,39,40,44,46,47,48,49,51,52,55,58,59,63,64,114,117,119,127,128,131,133,142,249,251,263,266,283,285,],[-87,-85,-84,-86,-174,-5,68,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,-87,-174,-127,-13,-126,-151,-16,68,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,68,-152,-122,-135,-142,-140,-141,-136,]),'TYPE_DOUBLE':([103,194,220,246,267,287,],[161,161,161,161,161,161,]),'TERMINATOR':([15,16,24,25,27,28,29,30,31,32,34,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,58,59,62,63,64,75,76,77,78,79,80,82,83,84,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,113,114,117,119,127,128,131,138,139,140,142,144,145,168,169,178,184,189,191,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,221,225,227,229,230,231,234,243,249,251,253,254,256,258,262,263,266,268,272,283,285,292,294,297,303,304,306,307,312,],[51,-5,-153,-165,-129,-122,-115,-123,-25,-174,-116,-17,-11,-131,-125,-14,117,-134,-117,51,51,-127,-13,-126,-133,-151,-16,-130,-15,131,-128,-124,-52,-77,-32,-76,-72,-58,-34,-74,142,-59,-65,-30,-68,-38,-71,-62,-73,-22,-20,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-19,-8,-132,-12,-166,-173,-90,-57,-65,-24,-152,-60,-56,-61,-23,-91,-118,-174,232,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,51,-26,-79,-145,-150,51,51,-67,-122,-135,-97,-93,-94,-92,-149,-142,-140,283,51,-141,-136,-146,51,-120,-121,-98,-99,51,-119,]),'LPAREN':([2,29,32,34,43,53,54,56,60,61,65,68,73,74,81,89,90,103,107,112,115,116,121,122,124,126,130,137,140,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,170,182,184,210,217,222,224,226,228,233,252,257,273,275,276,277,279,280,281,288,290,300,302,305,],[17,-115,103,-116,-117,120,121,126,129,130,-88,-89,136,-156,103,103,103,103,126,103,-27,103,103,180,103,103,103,103,126,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,217,-170,-118,103,103,103,260,103,103,103,273,276,103,288,103,290,103,-148,-147,103,103,103,308,103,]),'BLOCKEND':([15,16,24,25,27,28,30,33,36,37,38,39,40,44,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[-174,-5,-153,-165,-129,-122,-123,114,-17,-11,-131,-125,-14,-10,-9,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'KEYWORD_IF':([15,16,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,221,231,234,249,251,263,266,272,283,285,294,307,],[54,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,54,54,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,252,54,54,-122,-135,-142,-140,54,-141,-136,252,252,]),'AND_BITWISE':([29,31,34,43,75,76,78,79,80,82,83,85,86,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,111,138,139,140,144,145,168,184,197,198,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,141,-74,-59,-65,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,-36,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,141,-37,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-26,-79,-67,]),'KEYWORD_PROTECTED':([0,4,7,8,13,15,16,23,24,25,27,28,30,36,37,38,39,40,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[12,-4,12,-3,-2,12,-5,-1,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,12,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'AND':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,98,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,168,184,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,243,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-75,-49,-66,-46,-69,-41,-36,-24,-70,-63,167,-78,-57,-65,-24,-60,-56,-61,-118,-35,-37,-33,-44,-42,-43,-45,167,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-67,]),'GREATER':([29,31,34,43,75,76,78,79,80,83,85,86,88,91,92,93,94,98,100,101,102,104,105,107,108,109,111,138,139,140,144,145,168,184,200,201,202,203,205,206,207,208,209,211,212,213,214,215,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,147,-71,-62,-73,-75,-49,-66,-46,-69,-41,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-44,-42,-43,-45,-55,-54,-53,-50,-51,-64,-48,-47,147,147,-26,-79,-67,]),'LBRAC':([29,34,43,56,107,140,184,237,274,],[-115,-116,-117,124,124,124,-118,267,287,]),'KEYWORD_DEF':([6,9,12,14,15,16,24,25,27,28,30,36,37,38,39,40,44,46,47,48,49,51,52,55,58,59,63,64,114,117,119,127,128,131,142,249,251,263,266,283,285,],[-87,-85,-84,-86,-174,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,-87,-174,-127,-13,-126,-151,-16,123,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,-122,-135,-142,-140,-141,-136,]),'KEYWORD_ARRAY':([194,220,222,246,255,267,287,290,305,],[237,237,257,237,274,237,237,257,257,]),'KEYWORD_EXTENDS':([5,18,134,],[21,72,-155,]),'KEYWORD_UNTIL':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,97,98,99,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,168,169,184,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,243,265,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,-22,-18,-75,-21,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-61,-23,-118,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-67,281,]),'KEYWORD_FOR':([15,16,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,221,231,234,249,251,263,266,272,283,285,294,307,],[60,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,60,60,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,60,60,60,-122,-135,-142,-140,60,-141,-136,60,60,]),'TILDA':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[89,89,89,89,89,89,-27,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-148,-147,89,89,89,89,]),'BLOCKBEGIN':([1,5,10,15,16,18,19,20,22,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,57,58,59,63,64,114,117,119,127,128,131,134,135,142,221,231,234,242,249,251,263,266,272,283,284,285,294,307,],[15,-174,15,15,-5,-6,-157,-154,-158,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,15,15,-127,-13,-126,-151,-16,15,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-155,-7,-152,15,15,15,-159,-122,-135,-142,-140,15,-141,-167,-136,15,15,]),'KEYWORD_DO':([15,16,24,25,27,28,30,36,37,38,39,40,45,46,47,48,49,51,52,58,59,63,64,114,117,119,127,128,131,142,221,231,234,249,251,263,266,272,283,285,294,307,],[45,-5,-153,-165,-129,-122,-123,-17,-11,-131,-125,-14,45,45,-127,-13,-126,-151,-16,-130,-15,-128,-124,-8,-132,-12,-166,-173,-90,-152,45,45,45,-122,-135,-142,-140,45,-141,-136,45,45,]),'ASOP':([29,31,34,35,43,56,86,107,156,157,158,160,161,171,179,181,184,225,235,236,238,239,241,247,259,269,270,271,293,],[-115,-25,-116,115,-117,-24,115,-24,-106,-109,-108,-110,-107,-102,222,224,-118,-26,-113,-105,-104,-111,-112,-103,277,-169,-168,284,-114,]),'NOT':([32,81,89,90,103,112,115,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,280,281,288,290,300,305,],[112,112,112,112,112,112,-27,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-148,-147,112,112,112,112,]),'REMAINDER':([29,31,34,43,75,76,78,79,80,83,85,86,88,92,93,94,98,100,101,104,107,108,109,111,138,139,140,144,145,168,184,205,206,207,208,209,211,225,227,243,],[-115,-25,-116,-117,-52,-77,-76,-72,-58,-74,-59,-65,-68,-71,-62,-73,-75,151,-66,-69,-24,-70,-63,-78,-57,-65,-24,-60,-56,-61,-118,-55,-54,-53,151,151,-64,-26,-79,-67,]),'OR':([29,31,34,43,75,76,77,78,79,80,82,83,85,86,87,88,91,92,93,94,95,98,100,101,102,104,105,106,107,108,109,110,111,138,139,140,144,145,168,184,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,213,214,215,216,225,227,243,],[-115,-25,-116,-117,-52,-77,-32,-76,-72,-58,-34,-74,-59,-65,-30,-68,-38,-71,-62,-73,150,-75,-49,-66,-46,-69,-41,-36,-24,-70,-63,-28,-78,-57,-65,-24,-60,-56,-61,-118,-35,-37,-33,-44,-42,-43,-45,-29,-55,-54,-53,-50,-51,-64,-48,-47,-40,-39,-31,-26,-79,-67,]),'CHOOSE':([192,],[233,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([15,45,46,221,231,234,272,294,307,],[27,27,27,27,27,27,27,27,27,]),'variable_declarators':([120,136,180,260,],[172,172,223,172,]),'for_statement':([15,45,46,221,231,234,272,294,307,],[47,47,47,47,47,47,47,47,47,]),'variable_declaration_initializer':([222,290,305,],[253,298,309,]),'array_access':([15,32,45,46,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,221,222,226,228,231,233,234,272,273,276,279,288,290,294,300,305,307,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'block_statements_opt':([15,],[33,]),'inclusive_or_expression':([32,103,116,121,124,126,130,150,167,217,222,226,228,233,273,276,279,288,290,300,305,],[87,87,87,87,87,87,87,87,216,87,87,87,87,87,87,87,87,87,87,87,87,]),'while_statement':([15,45,46,221,231,234,272,294,307,],[39,39,39,39,39,39,39,39,39,]),'constructor_argument_list_opt':([17,],[69,]),'statement_expression':([15,45,46,221,231,234,272,294,307,],[41,41,41,41,41,41,41,41,41,]),'for_loop':([129,232,],[189,189,]),'local_variable_declaration_statement':([15,46,],[48,48,]),'method_return_type':([246,],[271,]),'ProgramStructure':([0,],[7,]),'SingletonObject':([0,7,15,46,],[8,8,52,52,]),'method_header_name':([15,46,],[53,53,]),'class_initializer':([222,290,305,],[256,256,256,]),'array_data_type':([194,220,246,267,287,],[241,241,241,241,241,]),'int_float':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'name':([15,21,26,32,45,46,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,194,210,217,220,221,222,226,228,231,233,234,246,255,267,272,273,276,279,287,288,290,294,300,305,307,],[56,73,74,107,56,56,140,140,140,107,140,107,107,107,107,107,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,235,140,107,235,56,107,107,107,56,107,56,235,275,235,56,107,107,107,235,107,107,56,107,107,56,]),'argument_list_opt':([126,276,288,],[187,289,296,]),'variable_declarator_id':([120,122,136,180,218,260,],[171,171,171,171,171,171,]),'for_step_opts':([189,],[229,]),'conditional_and_expression':([32,103,116,121,124,126,130,150,217,222,226,228,233,273,276,279,288,290,300,305,],[110,110,110,110,110,110,110,204,110,110,110,110,110,110,110,110,110,110,110,110,]),'unary_expression':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[75,138,144,145,75,168,75,75,75,75,75,75,75,75,75,75,75,75,75,205,206,207,75,75,75,75,75,75,75,243,75,75,75,75,75,75,75,75,75,75,75,75,]),'ObjectDeclare':([0,7,15,46,],[1,1,1,1,]),'unary_expression_not_plus_minus':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'c_literal':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'valid_variable':([15,32,45,46,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,221,222,226,228,231,233,234,272,273,276,279,288,290,294,300,305,307,],[35,86,35,35,139,139,139,86,139,86,86,86,86,86,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,86,35,86,86,86,35,86,35,35,86,86,86,86,86,35,86,86,35,]),'reference_type':([194,220,246,267,287,],[236,236,236,236,236,]),'variable_declarator':([120,122,136,180,218,260,],[174,179,174,174,245,174,]),'argument_list':([126,276,288,],[185,185,185,]),'conditional_or_expression':([32,103,116,121,124,126,130,217,222,226,228,233,273,276,279,288,290,300,305,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'variable_declaration_body':([122,],[178,]),'do_while_statement':([15,45,46,221,231,234,272,294,307,],[49,49,49,49,49,49,49,49,49,]),'multiplicative_expression':([32,103,116,121,124,126,130,137,141,143,146,147,148,149,150,154,155,163,164,165,166,167,217,222,226,228,233,273,276,279,288,290,300,305,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,208,209,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'for_update':([129,232,],[191,191,]),'constructor_argument_list_declarator':([17,133,],[70,195,]),'shift_expression':([32,103,116,121,124,126,130,137,141,143,146,147,148,149,150,165,166,167,217,222,226,228,233,273,276,279,288,290,300,305,],[105,105,105,105,105,105,105,105,105,105,200,201,202,203,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'variable_literal':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'class_header_extends_opt':([5,],[20,]),'func_argument_list_opt':([120,136,260,],[173,196,278,]),'class_and_objects':([0,7,],[13,23,]),'assignment_operator':([35,86,],[116,116,]),'expression':([32,103,121,124,126,130,217,222,226,228,233,273,276,279,288,290,300,305,],[113,162,177,183,188,193,244,258,261,262,265,286,188,292,188,258,306,258,]),'block':([1,10,15,45,46,57,221,231,234,272,294,307,],[16,25,63,63,63,128,63,63,63,63,63,63,]),'if_then_else_statement':([15,45,46,221,231,234,272,294,307,],[64,64,64,64,64,64,64,64,64,]),'method_declaration':([15,46,],[36,36,]),'exclusive_or_expression':([32,103,116,121,124,126,130,143,150,167,217,222,226,228,233,273,276,279,288,290,300,305,],[77,77,77,77,77,77,77,199,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'primary':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'if_then_else_intermediate':([221,294,307,],[250,301,310,]),'if_then_statement':([15,45,46,221,231,234,272,294,307,],[30,30,30,30,30,30,30,30,30,]),'additive_expression':([32,103,116,121,124,126,130,137,141,143,146,147,148,149,150,163,164,165,166,167,217,222,226,228,233,273,276,279,288,290,300,305,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,212,213,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'simple_name':([15,21,26,32,45,46,81,89,90,103,112,116,121,124,125,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,194,210,217,220,221,222,226,228,231,233,234,246,255,267,272,273,276,279,287,288,290,294,300,305,307,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,184,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'class_header_extends':([5,],[19,]),'constructor_argument_list':([17,],[67,]),'block_statement':([15,46,],[37,119,]),'primitive_type':([103,194,220,246,267,287,],[159,238,238,238,238,238,]),'literal':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'relational_expression':([32,103,116,121,124,126,130,137,141,143,150,165,166,167,217,222,226,228,233,273,276,279,288,290,300,305,],[91,91,91,91,91,91,91,91,91,91,91,214,215,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'statement':([15,45,46,221,231,234,272,294,307,],[40,118,40,251,263,266,285,251,285,]),'cast_expression':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'type':([194,220,246,267,287,],[240,247,270,282,295,]),'empty':([0,5,7,15,17,32,46,120,126,136,189,260,276,288,],[6,22,6,44,71,96,6,176,186,176,230,176,186,186,]),'variable_argument_list':([290,],[299,]),'declaration_keyword':([17,55,133,],[66,122,66,]),'qualified_name':([15,21,26,32,45,46,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,194,210,217,220,221,222,226,228,231,233,234,246,255,267,272,273,276,279,287,288,290,294,300,305,307,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'class_body':([10,],[24,]),'method_invocation':([15,32,45,46,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,221,222,226,228,231,233,234,272,273,276,279,288,290,294,300,305,307,],[42,104,42,42,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,42,104,104,104,42,104,42,42,104,104,104,104,104,42,104,104,42,]),'class_header':([0,7,15,46,],[10,10,10,10,]),'equality_expression':([32,103,116,121,124,126,130,137,141,143,150,167,217,222,226,228,233,273,276,279,288,290,300,305,],[106,106,106,106,106,106,106,106,198,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'method_header':([15,46,],[57,57,]),'empty_statement':([15,45,46,221,231,234,272,294,307,],[58,58,58,58,58,58,58,58,58,]),'local_variable_declaration':([15,46,],[62,62,]),'modifier':([0,7,15,46,],[14,14,14,14,]),'for_untilTo':([265,],[279,]),'if_then_else_statement_precedence':([221,294,307,],[248,248,248,]),'normal_statement':([15,45,46,221,231,234,272,294,307,],[28,28,28,249,28,28,28,249,249,]),'class_header_name1':([0,7,15,46,],[2,2,2,2,]),'class_data_type':([194,220,246,267,287,],[239,239,239,239,239,]),'and_expression':([32,103,116,121,124,126,130,137,143,150,167,217,222,226,228,233,273,276,279,288,290,300,305,],[82,82,82,82,82,82,82,197,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'base_variable_set':([32,81,89,90,103,112,116,121,124,126,130,137,141,143,146,147,148,149,150,151,152,153,154,155,163,164,165,166,167,210,217,222,226,228,233,273,276,279,288,290,300,305,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'class_header_name':([0,7,15,46,],[5,5,5,5,]),'return_statement':([15,45,46,221,231,234,272,294,307,],[38,38,38,38,38,38,38,38,38,]),'block_statements':([15,],[46,]),'assignment_expression':([32,103,116,121,124,126,130,217,222,226,228,233,273,276,279,288,290,300,305,],[97,97,169,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'expression_optional':([32,],[84,]),'assignment':([15,32,45,46,103,116,121,124,126,130,217,221,222,226,228,231,233,234,272,273,276,279,288,290,294,300,305,307,],[50,99,50,50,99,99,99,99,99,99,99,50,99,99,99,50,99,50,50,99,99,99,99,99,50,99,99,50,]),'for_logic':([129,232,],[190,264,]),'method_body':([57,],[127,]),'modifier_opts':([0,7,15,46,],[11,11,55,55,]),'array_initializer':([222,290,305,],[254,254,254,]),'class_declaration':([0,7,15,46,],[4,4,59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramStructure","S'",1,None,None,None),
  ('ProgramStructure -> ProgramStructure class_and_objects','ProgramStructure',2,'p_program_structure','GRAMMAR.py',15),
  ('ProgramStructure -> class_and_objects','ProgramStructure',1,'p_program_structure','GRAMMAR.py',16),
  ('class_and_objects -> SingletonObject','class_and_objects',1,'p_class_and_objects','GRAMMAR.py',23),
  ('class_and_objects -> class_declaration','class_and_objects',1,'p_class_and_objects','GRAMMAR.py',24),
  ('SingletonObject -> ObjectDeclare block','SingletonObject',2,'p_SingletonObject','GRAMMAR.py',28),
  ('ObjectDeclare -> KEYWORD_OBJECT IDENTIFIER','ObjectDeclare',2,'p_object_declare','GRAMMAR.py',32),
  ('ObjectDeclare -> KEYWORD_OBJECT IDENTIFIER KEYWORD_EXTENDS IDENTIFIER','ObjectDeclare',4,'p_object_declare','GRAMMAR.py',33),
  ('block -> BLOCKBEGIN block_statements_opt BLOCKEND','block',3,'p_block','GRAMMAR.py',47),
  ('block_statements_opt -> block_statements','block_statements_opt',1,'p_block_statements_opt','GRAMMAR.py',53),
  ('block_statements_opt -> empty','block_statements_opt',1,'p_block_statements_opt','GRAMMAR.py',54),
  ('block_statements -> block_statement','block_statements',1,'p_block_statements','GRAMMAR.py',58),
  ('block_statements -> block_statements block_statement','block_statements',2,'p_block_statements','GRAMMAR.py',59),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block_statement','GRAMMAR.py',66),
  ('block_statement -> statement','block_statement',1,'p_block_statement','GRAMMAR.py',67),
  ('block_statement -> class_declaration','block_statement',1,'p_block_statement','GRAMMAR.py',68),
  ('block_statement -> SingletonObject','block_statement',1,'p_block_statement','GRAMMAR.py',69),
  ('block_statement -> method_declaration','block_statement',1,'p_block_statement','GRAMMAR.py',70),
  ('expression -> assignment_expression','expression',1,'p_expression','GRAMMAR.py',75),
  ('expression_optional -> expression','expression_optional',1,'p_expression_optional','GRAMMAR.py',79),
  ('expression_optional -> empty','expression_optional',1,'p_expression_optional','GRAMMAR.py',80),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','GRAMMAR.py',84),
  ('assignment_expression -> conditional_or_expression','assignment_expression',1,'p_assignment_expression','GRAMMAR.py',85),
  ('assignment -> valid_variable assignment_operator assignment_expression','assignment',3,'p_assignment','GRAMMAR.py',90),
  ('valid_variable -> name','valid_variable',1,'p_valid_variable','GRAMMAR.py',94),
  ('valid_variable -> array_access','valid_variable',1,'p_valid_variable','GRAMMAR.py',95),
  ('array_access -> name LBRAC expression RBRAC','array_access',4,'p_array_access','GRAMMAR.py',99),
  ('assignment_operator -> ASOP','assignment_operator',1,'p_assignment_operator','GRAMMAR.py',105),
  ('conditional_or_expression -> conditional_and_expression','conditional_or_expression',1,'p_conditional_or_expression','GRAMMAR.py',112),
  ('conditional_or_expression -> conditional_or_expression OR conditional_and_expression','conditional_or_expression',3,'p_conditional_or_expression','GRAMMAR.py',113),
  ('conditional_and_expression -> inclusive_or_expression','conditional_and_expression',1,'p_conditional_and_expression','GRAMMAR.py',124),
  ('conditional_and_expression -> conditional_and_expression AND inclusive_or_expression','conditional_and_expression',3,'p_conditional_and_expression','GRAMMAR.py',125),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','GRAMMAR.py',133),
  ('inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','GRAMMAR.py',134),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','GRAMMAR.py',142),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','GRAMMAR.py',143),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','GRAMMAR.py',151),
  ('and_expression -> and_expression AND_BITWISE equality_expression','and_expression',3,'p_and_expression','GRAMMAR.py',152),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','GRAMMAR.py',160),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','GRAMMAR.py',161),
  ('equality_expression -> equality_expression NEQUAL relational_expression','equality_expression',3,'p_equality_expression','GRAMMAR.py',162),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','GRAMMAR.py',171),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','GRAMMAR.py',172),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','GRAMMAR.py',173),
  ('relational_expression -> relational_expression GEQ shift_expression','relational_expression',3,'p_relational_expression','GRAMMAR.py',174),
  ('relational_expression -> relational_expression LEQ shift_expression','relational_expression',3,'p_relational_expression','GRAMMAR.py',175),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','GRAMMAR.py',184),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','GRAMMAR.py',185),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','GRAMMAR.py',186),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','GRAMMAR.py',195),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','GRAMMAR.py',196),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','GRAMMAR.py',197),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','GRAMMAR.py',205),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','GRAMMAR.py',206),
  ('multiplicative_expression -> multiplicative_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','GRAMMAR.py',207),
  ('multiplicative_expression -> multiplicative_expression REMAINDER unary_expression','multiplicative_expression',3,'p_multiplicative_expression','GRAMMAR.py',208),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','GRAMMAR.py',216),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','GRAMMAR.py',217),
  ('unary_expression -> unary_expression_not_plus_minus','unary_expression',1,'p_unary_expression','GRAMMAR.py',218),
  ('unary_expression_not_plus_minus -> base_variable_set','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','GRAMMAR.py',226),
  ('unary_expression_not_plus_minus -> TILDA unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus','GRAMMAR.py',227),
  ('unary_expression_not_plus_minus -> NOT unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus','GRAMMAR.py',228),
  ('unary_expression_not_plus_minus -> cast_expression','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','GRAMMAR.py',229),
  ('base_variable_set -> variable_literal','base_variable_set',1,'p_base_variable_set','GRAMMAR.py',238),
  ('base_variable_set -> LPAREN expression RPAREN','base_variable_set',3,'p_base_variable_set','GRAMMAR.py',239),
  ('variable_literal -> valid_variable','variable_literal',1,'p_variableliteral','GRAMMAR.py',248),
  ('variable_literal -> primary','variable_literal',1,'p_variableliteral','GRAMMAR.py',249),
  ('cast_expression -> LPAREN primitive_type RPAREN unary_expression','cast_expression',4,'p_cast_expression','GRAMMAR.py',254),
  ('primary -> literal','primary',1,'p_primary','GRAMMAR.py',260),
  ('primary -> method_invocation','primary',1,'p_primary','GRAMMAR.py',261),
  ('literal -> int_float','literal',1,'p_literal','GRAMMAR.py',265),
  ('literal -> c_literal','literal',1,'p_literal','GRAMMAR.py',266),
  ('c_literal -> CHAR','c_literal',1,'p_c_literal','GRAMMAR.py',270),
  ('c_literal -> STRING','c_literal',1,'p_c_literal','GRAMMAR.py',271),
  ('c_literal -> BOOL_CONSTT','c_literal',1,'p_c_literal','GRAMMAR.py',272),
  ('c_literal -> BOOL_CONSTF','c_literal',1,'p_c_literal','GRAMMAR.py',273),
  ('c_literal -> KEYWORD_NULL','c_literal',1,'p_c_literal','GRAMMAR.py',274),
  ('int_float -> DOUBLE_NUMBER','int_float',1,'p_int_float','GRAMMAR.py',279),
  ('int_float -> INT_NUMBER','int_float',1,'p_int_float','GRAMMAR.py',280),
  ('method_invocation -> name LPAREN argument_list_opt RPAREN','method_invocation',4,'p_method_invocation','GRAMMAR.py',287),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt','GRAMMAR.py',293),
  ('argument_list_opt -> empty','argument_list_opt',1,'p_argument_list_opt2','GRAMMAR.py',297),
  ('argument_list -> expression','argument_list',1,'p_argument_list','GRAMMAR.py',301),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','GRAMMAR.py',302),
  ('modifier -> KEYWORD_PROTECTED','modifier',1,'p_modifier','GRAMMAR.py',319),
  ('modifier -> KEYWORD_PRIVATE','modifier',1,'p_modifier','GRAMMAR.py',320),
  ('modifier_opts -> modifier','modifier_opts',1,'p_modifier_opts','GRAMMAR.py',325),
  ('modifier_opts -> empty','modifier_opts',1,'p_modifier_opts','GRAMMAR.py',326),
  ('declaration_keyword -> KEYWORD_VAR','declaration_keyword',1,'p_declaration_keyword','GRAMMAR.py',330),
  ('declaration_keyword -> KEYWORD_VAL','declaration_keyword',1,'p_declaration_keyword','GRAMMAR.py',331),
  ('local_variable_declaration_statement -> local_variable_declaration TERMINATOR','local_variable_declaration_statement',2,'p_local_variable_declaration_statement','GRAMMAR.py',337),
  ('local_variable_declaration -> modifier_opts declaration_keyword variable_declaration_body','local_variable_declaration',3,'p_local_variable_declaration','GRAMMAR.py',342),
  ('variable_declaration_initializer -> expression','variable_declaration_initializer',1,'p_variable_declaration_initializer','GRAMMAR.py',346),
  ('variable_declaration_initializer -> array_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','GRAMMAR.py',347),
  ('variable_declaration_initializer -> class_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','GRAMMAR.py',348),
  ('variable_argument_list -> variable_declaration_initializer','variable_argument_list',1,'p_variable_argument_list','GRAMMAR.py',352),
  ('variable_argument_list -> variable_argument_list COMMA variable_declaration_initializer','variable_argument_list',3,'p_variable_argument_list','GRAMMAR.py',353),
  ('variable_declaration_body -> variable_declarator ASOP variable_declaration_initializer','variable_declaration_body',3,'p_variable_declaration_body_1','GRAMMAR.py',361),
  ('variable_declaration_body -> LPAREN variable_declarators RPAREN ASOP LPAREN variable_argument_list RPAREN','variable_declaration_body',7,'p_variable_declaration_body_2','GRAMMAR.py',366),
  ('variable_declaration_body -> IDENTIFIER ASOP LPAREN func_argument_list_opt RPAREN FUNTYPE expression','variable_declaration_body',7,'p_variable_declaration_body_3','GRAMMAR.py',377),
  ('variable_declarators -> variable_declarator','variable_declarators',1,'p_variable_declarators','GRAMMAR.py',388),
  ('variable_declarators -> variable_declarators COMMA variable_declarator','variable_declarators',3,'p_variable_declarators','GRAMMAR.py',389),
  ('variable_declarator -> variable_declarator_id','variable_declarator',1,'p_variable_declarator','GRAMMAR.py',397),
  ('variable_declarator_id -> IDENTIFIER COLON type','variable_declarator_id',3,'p_variable_declarator_id','GRAMMAR.py',402),
  ('type -> primitive_type','type',1,'p_type','GRAMMAR.py',410),
  ('type -> reference_type','type',1,'p_type','GRAMMAR.py',411),
  ('primitive_type -> TYPE_INT','primitive_type',1,'p_primitive_type','GRAMMAR.py',415),
  ('primitive_type -> TYPE_DOUBLE','primitive_type',1,'p_primitive_type','GRAMMAR.py',416),
  ('primitive_type -> TYPE_CHAR','primitive_type',1,'p_primitive_type','GRAMMAR.py',417),
  ('primitive_type -> TYPE_STRING','primitive_type',1,'p_primitive_type','GRAMMAR.py',418),
  ('primitive_type -> TYPE_BOOLEAN','primitive_type',1,'p_primitive_type','GRAMMAR.py',419),
  ('reference_type -> class_data_type','reference_type',1,'p_reference_type','GRAMMAR.py',425),
  ('reference_type -> array_data_type','reference_type',1,'p_reference_type','GRAMMAR.py',426),
  ('class_data_type -> name','class_data_type',1,'p_class_data_type','GRAMMAR.py',430),
  ('array_data_type -> KEYWORD_ARRAY LBRAC type RBRAC','array_data_type',4,'p_array_data_type','GRAMMAR.py',434),
  ('name -> simple_name','name',1,'p_name','GRAMMAR.py',443),
  ('name -> qualified_name','name',1,'p_name','GRAMMAR.py',444),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','GRAMMAR.py',449),
  ('qualified_name -> name INST simple_name','qualified_name',3,'p_qualified_name','GRAMMAR.py',455),
  ('array_initializer -> KEYWORD_NEW KEYWORD_ARRAY LBRAC type RBRAC LPAREN INT_NUMBER RPAREN','array_initializer',8,'p_array_initializer','GRAMMAR.py',462),
  ('array_initializer -> KEYWORD_ARRAY LPAREN argument_list_opt RPAREN','array_initializer',4,'p_array_initializer','GRAMMAR.py',463),
  ('class_initializer -> KEYWORD_NEW name LPAREN argument_list_opt RPAREN','class_initializer',5,'p_class_initializer','GRAMMAR.py',481),
  ('statement -> normal_statement','statement',1,'p_statement','GRAMMAR.py',489),
  ('statement -> if_then_statement','statement',1,'p_statement','GRAMMAR.py',490),
  ('statement -> if_then_else_statement','statement',1,'p_statement','GRAMMAR.py',491),
  ('statement -> while_statement','statement',1,'p_statement','GRAMMAR.py',492),
  ('statement -> do_while_statement','statement',1,'p_statement','GRAMMAR.py',493),
  ('statement -> for_statement','statement',1,'p_statement','GRAMMAR.py',494),
  ('normal_statement -> block','normal_statement',1,'p_normal_statement','GRAMMAR.py',499),
  ('normal_statement -> expression_statement','normal_statement',1,'p_normal_statement','GRAMMAR.py',500),
  ('normal_statement -> empty_statement','normal_statement',1,'p_normal_statement','GRAMMAR.py',501),
  ('normal_statement -> return_statement','normal_statement',1,'p_normal_statement','GRAMMAR.py',502),
  ('expression_statement -> statement_expression TERMINATOR','expression_statement',2,'p_expression_statement','GRAMMAR.py',510),
  ('statement_expression -> assignment','statement_expression',1,'p_statement_expression','GRAMMAR.py',516),
  ('statement_expression -> method_invocation','statement_expression',1,'p_statement_expression','GRAMMAR.py',517),
  ('if_then_statement -> KEYWORD_IF LPAREN expression RPAREN statement','if_then_statement',5,'p_if_then_statement','GRAMMAR.py',523),
  ('if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN if_then_else_intermediate KEYWORD_ELSE statement','if_then_else_statement',7,'p_if_then_else_statement','GRAMMAR.py',531),
  ('if_then_else_statement_precedence -> KEYWORD_IF LPAREN expression RPAREN if_then_else_intermediate KEYWORD_ELSE if_then_else_intermediate','if_then_else_statement_precedence',7,'p_if_then_else_statement_precedence','GRAMMAR.py',540),
  ('if_then_else_intermediate -> normal_statement','if_then_else_intermediate',1,'p_if_then_else_intermediate','GRAMMAR.py',549),
  ('if_then_else_intermediate -> if_then_else_statement_precedence','if_then_else_intermediate',1,'p_if_then_else_intermediate','GRAMMAR.py',550),
  ('while_statement -> KEYWORD_WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','GRAMMAR.py',555),
  ('do_while_statement -> KEYWORD_DO statement KEYWORD_WHILE LPAREN expression RPAREN TERMINATOR','do_while_statement',7,'p_do_while_statement','GRAMMAR.py',563),
  ('for_statement -> KEYWORD_FOR LPAREN for_logic RPAREN statement','for_statement',5,'p_for_statement','GRAMMAR.py',573),
  ('for_logic -> for_update','for_logic',1,'p_for_logic','GRAMMAR.py',581),
  ('for_logic -> for_update TERMINATOR for_logic','for_logic',3,'p_for_logic','GRAMMAR.py',582),
  ('for_update -> for_loop for_step_opts','for_update',2,'p_for_update','GRAMMAR.py',590),
  ('for_loop -> IDENTIFIER CHOOSE expression for_untilTo expression','for_loop',5,'p_for_loop','GRAMMAR.py',594),
  ('for_untilTo -> KEYWORD_UNTIL','for_untilTo',1,'p_for_untilTo','GRAMMAR.py',601),
  ('for_untilTo -> KEYWORD_TO','for_untilTo',1,'p_for_untilTo','GRAMMAR.py',602),
  ('for_step_opts -> KEYWORD_BY expression','for_step_opts',2,'p_for_step_opts','GRAMMAR.py',609),
  ('for_step_opts -> empty','for_step_opts',1,'p_for_step_opts','GRAMMAR.py',610),
  ('empty_statement -> TERMINATOR','empty_statement',1,'p_empty_statement','GRAMMAR.py',619),
  ('return_statement -> KEYWORD_RETURN expression_optional TERMINATOR','return_statement',3,'p_return_statement','GRAMMAR.py',625),
  ('class_declaration -> class_header class_body','class_declaration',2,'p_class_declaration','GRAMMAR.py',653),
  ('class_header -> class_header_name class_header_extends_opt','class_header',2,'p_class_header','GRAMMAR.py',658),
  ('class_header_name -> class_header_name1 LPAREN constructor_argument_list_opt RPAREN','class_header_name',4,'p_class_header_name','GRAMMAR.py',662),
  ('class_header_name1 -> modifier_opts KEYWORD_CLASS name','class_header_name1',3,'p_class_header_name1','GRAMMAR.py',670),
  ('class_header_extends_opt -> class_header_extends','class_header_extends_opt',1,'p_class_header_extends_opt','GRAMMAR.py',676),
  ('class_header_extends_opt -> empty','class_header_extends_opt',1,'p_class_header_extends_opt','GRAMMAR.py',677),
  ('class_header_extends -> KEYWORD_EXTENDS name LPAREN func_argument_list_opt RPAREN','class_header_extends',5,'p_class_header_extends','GRAMMAR.py',682),
  ('constructor_argument_list_opt -> constructor_argument_list','constructor_argument_list_opt',1,'p_constructor_argument_list_opt','GRAMMAR.py',690),
  ('constructor_argument_list_opt -> empty','constructor_argument_list_opt',1,'p_constructor_argument_list_opt','GRAMMAR.py',691),
  ('constructor_argument_list -> constructor_argument_list_declarator','constructor_argument_list',1,'p_constructor_argument_list','GRAMMAR.py',695),
  ('constructor_argument_list -> constructor_argument_list COMMA constructor_argument_list_declarator','constructor_argument_list',3,'p_constructor_argument_list','GRAMMAR.py',696),
  ('constructor_argument_list_declarator -> declaration_keyword IDENTIFIER COLON type','constructor_argument_list_declarator',4,'p_constructor_argument_list_declarator','GRAMMAR.py',705),
  ('class_body -> block','class_body',1,'p_class_body','GRAMMAR.py',711),
  ('method_declaration -> method_header method_body','method_declaration',2,'p_method_declaration','GRAMMAR.py',717),
  ('method_header -> method_header_name LPAREN func_argument_list_opt RPAREN COLON method_return_type ASOP','method_header',7,'p_method_header','GRAMMAR.py',722),
  ('method_return_type -> type','method_return_type',1,'p_method_return_type','GRAMMAR.py',731),
  ('method_return_type -> TYPE_VOID','method_return_type',1,'p_method_return_type1','GRAMMAR.py',735),
  ('method_header_name -> modifier_opts KEYWORD_DEF IDENTIFIER','method_header_name',3,'p_method_header_name','GRAMMAR.py',740),
  ('func_argument_list_opt -> variable_declarators','func_argument_list_opt',1,'p_func_argument_list_opt','GRAMMAR.py',746),
  ('func_argument_list_opt -> empty','func_argument_list_opt',1,'p_func_argument_list_opt','GRAMMAR.py',747),
  ('method_body -> block','method_body',1,'p_method_body','GRAMMAR.py',751),
  ('empty -> <empty>','empty',0,'p_empty','GRAMMAR.py',756),
]

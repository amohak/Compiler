
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D838E79FD8E4150E246F818CC8C7DF11'
    
_lr_action_items = {'DIVIDE':([9,23,25,29,34,37,38,39,40,45,50,57,60,64,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,203,204,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,121,-77,-80,-121,-81,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,121,121,-78,-29,-88,]),'REMAINDER_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,165,-28,-124,-29,]),'RSHIFT':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,123,-77,-80,-61,-121,-81,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,123,123,123,123,-78,-29,-88,]),'TYPE_CHAR':([210,226,229,263,313,320,],[251,251,251,251,251,251,]),'LESS':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,142,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,142,142,-78,-29,-88,]),'MINUS_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,163,-28,-124,-29,]),'KEYWORD_CLASS':([0,2,4,5,6,11,12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,257,271,301,303,309,332,336,],[1,1,-4,-2,-3,-1,-8,1,-5,1,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,1,-165,-176,-136,-95,-128,-137,1,-189,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'EQUAL':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,74,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,216,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,-53,-82,-122,150,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,150,-78,-29,-88,]),'TYPE_STRING':([210,226,229,263,313,320,],[243,243,243,243,243,243,]),'KEYWORD_BY':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,99,100,101,102,103,108,115,126,134,137,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,220,230,232,233,235,258,325,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-41,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-191,-29,-88,-44,-46,277,-151,]),'KEYWORD_MATCH':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,53,56,57,59,60,64,66,68,71,74,79,80,83,84,85,87,100,101,102,103,108,115,126,134,137,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,230,232,233,235,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,127,-47,-80,-61,-121,-81,-53,-24,-122,-51,-49,-74,-19,-22,-84,-79,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-29,-88,-44,-46,]),'COLON':([145,146,178,184,227,255,],[210,-104,226,229,263,-103,]),'INST':([9,37,60,71,103,187,253,312,],[-123,113,-121,-122,113,-124,113,113,]),'LSHIFT':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,124,-77,-80,-61,-121,-81,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,124,124,124,124,-78,-29,-88,]),'MINUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,32,33,34,35,37,38,39,40,41,44,45,48,50,52,54,55,57,58,59,60,61,62,63,64,65,67,68,71,76,78,80,81,82,85,86,87,88,98,99,100,101,102,103,104,105,106,107,108,109,110,112,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,139,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,187,192,193,194,195,196,197,198,199,201,203,204,205,217,218,230,231,232,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-123,-8,24,-5,24,-177,-190,-191,-27,24,-86,-191,-85,24,-191,-14,-83,-17,-26,-87,-67,-73,-191,-191,-64,-163,-77,24,-191,-191,-80,-191,133,-121,24,-18,-12,-81,24,-15,-82,-122,-191,-191,-74,-191,-191,-84,24,-79,-16,-135,-41,-72,-79,-82,-26,-9,-7,24,-131,-71,-139,-133,24,24,-28,-138,-191,-191,-132,24,24,24,24,24,-191,-76,-134,-130,24,-129,24,24,-82,-75,24,24,24,24,24,24,24,24,-165,-176,-136,-95,-128,24,-137,24,-31,-37,-35,-30,-33,-39,-36,-38,-32,24,-34,-40,-189,-124,24,24,-70,-69,-68,133,133,24,-191,-65,-66,-164,-13,-78,-29,24,-88,24,-157,-156,-191,-175,24,-158,24,24,24,-191,-142,-149,-191,-153,-152,24,-147,24,24,24,-191,-148,24,-143,24,24,-191,24,]),'KEYWORD_OBJECT':([0,2,4,5,6,11,12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,257,271,301,303,309,332,336,],[8,8,-4,-2,-3,-1,-8,8,-5,8,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,8,-165,-176,-136,-95,-128,-137,8,-189,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'KEYWORD_RETURN':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,256,257,271,276,301,303,309,331,332,336,337,345,346,],[-8,61,-5,61,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,61,-165,-176,-136,-95,-128,-137,61,-189,-191,-164,-13,-157,-156,-191,-175,-158,61,-142,-149,-147,-191,-148,-143,61,-191,61,]),'BOOL_CONSTF':([12,13,14,15,16,17,22,24,28,30,32,33,35,41,44,48,52,54,55,58,61,62,63,65,67,76,78,81,82,86,88,98,99,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,192,193,199,201,205,217,231,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-8,25,-5,25,-177,-190,-191,25,-191,25,-191,-14,-17,-191,-191,-163,25,-191,-191,-191,25,-18,-12,25,-15,-191,-191,-191,-191,25,-16,-135,-41,-9,-7,25,-131,-139,-133,25,25,-138,-191,-191,-132,25,25,25,25,25,-191,-134,-130,25,-129,25,25,25,25,25,25,25,25,25,25,-165,-176,-136,-95,-128,25,-137,25,-31,-37,-35,-30,-33,-39,-36,-38,-32,25,-34,-40,-189,25,25,25,-191,-164,-13,25,25,-157,-156,-191,-175,25,-158,25,25,25,-191,-142,-149,-191,-153,-152,25,-147,25,25,25,-191,-148,25,-143,25,25,-191,25,]),'GEQ':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,140,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,140,140,-78,-29,-88,]),'BOOL_CONSTT':([12,13,14,15,16,17,22,24,28,30,32,33,35,41,44,48,52,54,55,58,61,62,63,65,67,76,78,81,82,86,88,98,99,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,192,193,199,201,205,217,231,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-8,29,-5,29,-177,-190,-191,29,-191,29,-191,-14,-17,-191,-191,-163,29,-191,-191,-191,29,-18,-12,29,-15,-191,-191,-191,-191,29,-16,-135,-41,-9,-7,29,-131,-139,-133,29,29,-138,-191,-191,-132,29,29,29,29,29,-191,-134,-130,29,-129,29,29,29,29,29,29,29,29,29,29,-165,-176,-136,-95,-128,29,-137,29,-31,-37,-35,-30,-33,-39,-36,-38,-32,29,-34,-40,-189,29,29,29,-191,-164,-13,29,29,-157,-156,-191,-175,29,-158,29,29,29,-191,-142,-149,-191,-153,-152,29,-147,29,29,29,-191,-148,29,-143,29,29,-191,29,]),'RPAREN':([9,19,21,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,92,94,95,97,99,100,101,102,103,108,111,114,115,126,134,137,139,160,179,180,181,182,183,185,187,188,189,190,191,194,195,196,197,198,202,203,204,206,207,208,209,212,213,214,216,218,219,220,221,224,230,232,233,234,235,242,243,244,245,246,247,249,250,251,252,253,258,262,264,265,266,278,279,302,314,318,321,324,325,328,339,341,],[-123,-191,-167,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,176,-182,-180,-181,-41,-72,-79,-82,-26,-71,-191,-191,-28,-76,-24,-22,-75,218,-184,-48,-170,227,-168,-169,-124,-89,-90,232,-91,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,256,-55,-54,-52,-78,-25,-191,259,-183,-29,-88,-44,267,-46,-111,-114,-116,-117,-110,-109,-115,-112,-113,-118,-119,-191,-107,-171,-108,-92,-150,-155,-154,-120,326,-191,331,-151,334,342,344,]),'LEQ':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,143,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,143,143,-78,-29,-88,]),'OR_BITWISE':([9,23,25,27,29,34,37,38,39,40,45,49,50,56,57,59,60,64,66,68,71,74,79,80,85,87,100,101,102,103,108,115,126,134,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,230,232,235,],[-123,-27,-86,106,-85,-83,-26,-87,-67,-73,-64,-56,-77,-47,-80,-61,-121,-81,-53,-82,-122,-51,-49,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-29,-88,106,]),'RBRAC':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,100,101,102,103,108,115,126,134,137,139,180,186,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,230,232,233,235,242,243,244,245,246,247,249,250,251,252,253,296,314,322,327,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,230,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-29,-88,-44,-46,-111,-114,-116,-117,-110,-109,-115,-112,-113,-118,-119,314,-120,329,333,]),'TYPE_VOID':([210,226,229,263,313,320,],[244,244,244,283,244,244,]),'TYPE_INT':([210,226,229,263,275,313,320,],[242,242,242,242,296,242,242,]),'AND_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,168,-28,-124,-29,]),'FUNTYPE':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,100,101,102,103,108,115,126,134,137,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,230,232,233,235,270,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-29,-88,-44,-46,288,]),'TYPE_BOOLEAN':([210,226,229,263,313,320,],[249,249,249,249,249,249,]),'KEYWORD_VAL':([12,13,14,15,16,17,19,21,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,177,201,205,217,238,241,257,271,301,303,309,332,336,],[-8,47,-5,47,-177,-190,47,-167,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,47,-165,-176,-136,-95,-128,-137,47,-189,47,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'PLUS':([9,12,13,14,15,16,17,22,23,24,25,28,29,30,32,33,34,35,37,38,39,40,41,44,45,48,50,52,54,55,57,58,59,60,61,62,63,64,65,67,68,71,76,78,80,81,82,85,86,87,88,98,99,100,101,102,103,104,105,106,107,108,109,110,112,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,134,139,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,187,192,193,194,195,196,197,198,199,201,203,204,205,217,218,230,231,232,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-123,-8,30,-5,30,-177,-190,-191,-27,30,-86,-191,-85,30,-191,-14,-83,-17,-26,-87,-67,-73,-191,-191,-64,-163,-77,30,-191,-191,-80,-191,132,-121,30,-18,-12,-81,30,-15,-82,-122,-191,-191,-74,-191,-191,-84,30,-79,-16,-135,-41,-72,-79,-82,-26,-9,-7,30,-131,-71,-139,-133,30,30,-28,-138,-191,-191,-132,30,30,30,30,30,-191,-76,-134,-130,30,-129,30,30,-82,-75,30,30,30,30,30,30,30,30,-165,-176,-136,-95,-128,30,-137,30,-31,-37,-35,-30,-33,-39,-36,-38,-32,30,-34,-40,-189,-124,30,30,-70,-69,-68,132,132,30,-191,-65,-66,-164,-13,-78,-29,30,-88,30,-157,-156,-191,-175,30,-158,30,30,30,-191,-142,-149,-191,-153,-152,30,-147,30,30,30,-191,-148,30,-143,30,30,-191,30,]),'IDENTIFIER':([1,8,12,13,14,15,16,17,19,21,22,24,28,30,32,33,35,41,44,46,47,48,52,54,55,58,61,62,63,65,67,70,72,76,78,81,82,86,88,93,96,97,98,99,104,105,106,107,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,192,193,199,201,205,210,211,217,225,226,228,229,231,237,238,241,256,257,260,263,271,274,276,277,282,292,301,303,304,305,306,307,309,313,316,317,320,321,331,332,335,336,337,338,345,346,],[9,18,-8,9,-5,9,-177,-190,-191,-167,-191,9,-191,9,-191,-14,-17,-191,-191,-93,-94,-163,9,-191,-191,-191,9,-18,-12,9,-15,146,147,-191,-191,-191,-191,9,-16,-185,178,-186,-135,-41,-9,-7,9,-131,-139,-133,184,9,9,9,-138,-191,-191,-132,9,9,9,9,9,-191,-134,-130,9,-129,9,9,9,9,9,9,9,9,9,9,-165,-176,-136,-95,-128,9,-137,9,-31,-37,-35,-30,-33,-39,-36,-38,-32,9,-34,-40,222,-189,-191,9,9,9,-191,-164,9,255,-13,-186,9,184,9,9,9,-157,-156,-191,-175,9,9,-158,9,9,9,-191,9,-142,-149,-191,-153,-152,9,-147,9,9,9,9,9,-191,-148,9,-143,9,9,-191,9,]),'KEYWORD_NEW':([274,],[292,]),'KEYWORD_WHILE':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,223,238,241,257,271,301,303,309,332,336,],[-8,43,-5,43,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,43,-165,-176,-136,-95,-128,-137,43,-189,-191,-164,-13,261,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'$end':([2,4,5,6,11,14,16,104,105,175,],[0,-4,-2,-3,-1,-5,-177,-9,-7,-189,]),'KEYWORD_ELSE':([22,41,48,54,76,81,98,99,104,105,109,116,128,154,158,201,205,238,241,268,271,297,298,299,301,315,340,343,347,],[-191,-191,-163,-191,-191,-191,-135,-41,-9,-7,-139,-138,-134,-136,-137,-191,-164,-157,-156,-42,-158,-146,-145,-191,-191,323,-191,345,-144,]),'XOR':([9,23,25,29,34,37,38,39,40,45,49,50,56,57,59,60,64,66,68,71,74,79,80,85,87,100,101,102,103,108,115,126,134,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,130,-80,-61,-121,-81,-53,-82,-122,-51,-49,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,130,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-29,-88,]),'KEYWORD_TO':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,100,101,102,103,108,115,126,134,137,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,230,232,233,235,281,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-29,-88,-44,-46,305,]),'KEYWORD_VAR':([12,13,14,15,16,17,19,21,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,177,201,205,217,238,241,257,271,301,303,309,332,336,],[-8,46,-5,46,-177,-190,46,-167,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,46,-165,-176,-136,-95,-128,-137,46,-189,46,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'INT_NUMBER':([12,13,14,15,16,17,22,24,28,30,32,33,35,41,44,48,52,54,55,58,61,62,63,65,67,76,78,81,82,86,88,98,99,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,192,193,199,201,205,217,231,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-8,38,-5,38,-177,-190,-191,38,-191,38,-191,-14,-17,-191,-191,-163,38,-191,-191,-191,38,-18,-12,38,-15,-191,-191,-191,-191,38,-16,-135,-41,-9,-7,38,-131,-139,-133,38,38,-138,-191,-191,-132,38,38,38,38,38,-191,-134,-130,38,-129,38,38,38,38,38,38,38,38,38,38,-165,-176,-136,-95,-128,38,-137,38,-31,-37,-35,-30,-33,-39,-36,-38,-32,38,-34,-40,-189,38,38,38,-191,-164,-13,38,38,-157,-156,-191,-175,38,-158,38,38,38,-191,-142,-149,-191,-153,-152,38,-147,38,38,38,-191,-148,38,-143,38,38,-191,38,]),'NEQUAL':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,74,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,216,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,-53,-82,-122,149,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,-55,-54,149,-78,-29,-88,]),'TIMES_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,161,-28,-124,-29,]),'TIMES':([9,23,25,29,34,37,38,39,40,45,50,57,60,64,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,203,204,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,122,-77,-80,-121,-81,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,122,122,-78,-29,-88,]),'LSHIFT_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,167,-28,-124,-29,]),'TYPE_DOUBLE':([210,226,229,263,313,320,],[250,250,250,250,250,250,]),'DIVIDE_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,169,-28,-124,-29,]),'TERMINATOR':([9,12,13,14,15,16,17,22,23,25,27,28,29,31,32,33,34,35,37,38,39,40,41,42,44,45,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,66,67,68,71,74,76,77,78,79,80,81,82,83,84,85,87,88,98,99,100,101,102,103,104,105,107,108,109,110,115,116,119,126,128,129,131,134,135,136,137,138,139,144,151,152,153,154,155,156,158,159,175,180,187,194,195,196,197,198,201,202,203,204,205,206,207,208,209,213,214,216,217,218,219,230,232,233,235,238,241,256,257,271,276,290,291,293,295,301,303,309,326,331,332,334,336,337,342,344,345,346,],[-123,-8,48,-5,48,-177,-190,-191,-27,-86,-45,-191,-85,109,-191,-14,-83,-17,-26,-87,-67,-73,-191,-23,-191,-64,-163,-56,-77,-43,-191,-191,-47,-80,-191,-61,-121,-191,-18,-12,-81,-53,-15,-141,-122,-51,-191,155,-191,-49,-74,-191,-191,-19,-140,-84,-79,-16,-135,-41,-72,-79,-82,-26,-9,-7,-131,-71,-139,-133,-28,-138,-132,-76,-134,-130,-129,-24,-21,205,-22,-20,-75,-96,48,-165,-176,-136,-95,-128,-137,48,-189,-48,-124,-70,-69,-68,-63,-62,-191,-50,-65,-66,-164,-59,-57,-58,-60,-55,-54,-52,-13,-78,-25,-29,-88,-44,-46,-157,-156,-191,-175,-158,48,-102,-98,-99,-97,-142,-149,-147,332,-191,-148,-127,-143,48,-126,-125,-191,48,]),'LPAREN':([9,10,12,13,14,15,16,17,22,24,28,30,32,33,35,36,37,41,43,44,48,52,54,55,58,60,61,62,63,65,67,71,73,76,78,81,82,86,88,89,98,99,103,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,187,192,193,199,201,205,217,231,237,238,241,256,257,260,261,271,274,276,277,282,300,301,303,304,305,306,307,309,312,316,317,321,329,331,332,333,335,336,337,338,345,346,],[-123,21,-8,86,-5,86,-177,-190,-191,86,-191,86,-191,-14,-17,21,114,-191,118,-191,-163,86,-191,-191,-191,-121,86,-18,-12,86,-15,-122,148,-191,-191,-191,-191,86,-16,173,-135,-41,114,-9,-7,86,-131,-139,-133,86,86,-138,-191,-191,-132,86,86,86,86,86,-191,-134,-130,86,-129,86,86,86,86,86,86,-174,86,86,86,86,-165,-176,-136,-95,-128,86,-137,86,-31,-37,-35,-30,-33,-39,-36,-38,-32,86,-34,-40,-189,-124,86,86,86,-191,-164,-13,86,86,-157,-156,-191,-175,86,282,-158,86,86,86,-191,316,-142,-149,-191,-153,-152,86,-147,321,86,86,86,335,-191,-148,338,86,-143,86,86,-191,86,]),'BLOCKEND':([12,13,14,15,16,17,22,26,28,32,33,35,41,44,48,54,55,58,62,63,67,69,76,78,81,82,88,91,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,175,200,201,205,215,217,238,239,240,241,257,268,271,272,273,289,301,303,309,310,319,332,336,],[-8,-191,-5,-191,-177,-190,-191,104,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-11,-191,-191,-191,-10,-16,104,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,-191,-165,-176,-136,-95,-128,-137,-189,238,-191,-164,104,-13,-157,271,-191,-156,-175,-42,-158,-191,-159,-160,-142,-149,-147,-191,-161,-148,-143,]),'KEYWORD_IF':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,256,257,271,276,301,303,309,331,332,336,337,345,346,],[-8,73,-5,73,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,73,-165,-176,-136,-95,-128,-137,73,-189,-191,-164,-13,-157,-156,-191,-175,-158,300,-142,-149,-147,-191,-148,-143,300,-191,300,]),'AND_BITWISE':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,74,79,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,-53,-82,-122,-51,157,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,157,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-29,-88,]),'GREATER':([9,23,25,29,34,37,38,39,40,45,49,50,57,59,60,64,66,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,197,198,203,204,206,207,208,209,213,214,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,-64,-56,-77,-80,-61,-121,-81,141,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,-63,-62,-65,-66,-59,-57,-58,-60,141,141,-78,-29,-88,]),'AND':([9,23,25,27,29,34,37,38,39,40,45,49,50,51,56,57,59,60,64,66,68,71,74,79,80,85,87,100,101,102,103,108,115,126,134,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,230,232,233,235,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-64,-56,-77,125,-47,-80,-61,-121,-81,-53,-82,-122,-51,-49,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-29,-88,125,-46,]),'LBRAC':([9,37,60,71,103,187,254,294,311,],[-123,112,-121,-122,112,-124,275,313,320,]),'ASOP':([9,23,37,60,71,87,115,187,230,242,243,244,245,246,247,248,249,250,251,252,253,283,284,285,314,],[-123,-27,-26,-121,-122,164,-28,-124,-29,-111,-114,-116,-117,-110,-109,274,-115,-112,-113,-118,-119,-116,-172,308,-120,]),'XOR_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,172,-28,-124,-29,]),'RSHIFT_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,162,-28,-124,-29,]),'OR_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,166,-28,-124,-29,]),'KEYWORD_DEF':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,257,271,301,303,309,332,336,],[-8,72,-5,72,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,72,-165,-176,-136,-95,-128,-137,72,-189,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'KEYWORD_ARRAY':([210,226,229,263,274,292,313,320,],[254,254,254,254,294,311,254,254,]),'KEYWORD_UNTIL':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,100,101,102,103,108,115,126,134,137,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,230,232,233,235,281,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-29,-88,-44,-46,306,]),'KEYWORD_FOR':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,257,271,301,303,309,332,336,],[-8,89,-5,89,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,89,-165,-176,-136,-95,-128,-137,89,-189,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'TILDA':([12,13,14,15,16,17,22,24,28,30,32,33,35,41,44,48,52,54,55,58,61,62,63,65,67,76,78,81,82,86,88,98,99,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,192,193,199,201,205,217,231,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-8,65,-5,65,-177,-190,-191,65,-191,65,-191,-14,-17,-191,-191,-163,65,-191,-191,-191,65,-18,-12,65,-15,-191,-191,-191,-191,65,-16,-135,-41,-9,-7,65,-131,-139,-133,65,65,-138,-191,-191,-132,65,65,65,65,65,-191,-134,-130,65,-129,65,65,65,65,65,65,65,65,65,65,-165,-176,-136,-95,-128,65,-137,65,-31,-37,-35,-30,-33,-39,-36,-38,-32,65,-34,-40,-189,65,65,65,-191,-164,-13,65,65,-157,-156,-191,-175,65,-158,65,65,65,-191,-142,-149,-191,-153,-152,65,-147,65,65,65,-191,-148,65,-143,65,65,-191,65,]),'BLOCKBEGIN':([3,7,12,13,14,15,16,17,18,20,22,28,32,33,35,41,44,48,54,55,58,62,63,67,75,76,78,81,82,88,90,98,99,104,105,107,109,110,116,119,127,128,129,131,151,152,153,154,155,156,158,159,174,175,176,201,205,217,236,238,241,256,257,259,267,268,269,271,276,280,286,287,288,301,303,308,309,323,330,331,332,336,337,345,346,],[12,17,-8,12,-5,12,-177,-190,-6,-178,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,153,-191,-191,-191,-191,-16,-191,-135,-41,-9,-7,-131,-139,-133,-138,-132,200,-134,-130,-129,12,-165,-176,-136,-95,-128,-137,12,12,-189,-179,-191,-164,-13,-191,-157,-156,-191,-175,-191,-191,-42,-191,-158,12,12,12,12,-162,-142,-149,-166,-147,-191,12,-191,-148,-143,12,-191,12,]),'KEYWORD_DO':([12,13,14,15,16,17,22,28,32,33,35,41,44,48,54,55,58,62,63,67,76,78,81,82,88,98,99,104,105,107,109,110,116,119,128,129,131,151,152,153,154,155,156,158,159,175,201,205,217,238,241,257,271,301,303,309,332,336,],[-8,90,-5,90,-177,-190,-191,-191,-191,-14,-17,-191,-191,-163,-191,-191,-191,-18,-12,-15,-191,-191,-191,-191,-16,-135,-41,-9,-7,-131,-139,-133,-138,-132,-134,-130,-129,90,-165,-176,-136,-95,-128,-137,90,-189,-191,-164,-13,-157,-156,-175,-158,-142,-149,-147,-148,-143,]),'PLUS_ASSIGN':([9,23,37,60,71,87,115,187,230,],[-123,-27,-26,-121,-122,171,-28,-124,-29,]),'NOT':([12,13,14,15,16,17,22,24,28,30,32,33,35,41,44,48,52,54,55,58,61,62,63,65,67,76,78,81,82,86,88,98,99,104,105,106,107,109,110,112,114,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,140,141,142,143,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,175,192,193,199,201,205,217,231,237,238,241,256,257,260,271,274,276,277,282,301,303,304,305,306,307,309,316,317,321,331,332,335,336,337,338,345,346,],[-8,52,-5,52,-177,-190,-191,52,-191,52,-191,-14,-17,-191,-191,-163,52,-191,-191,-191,52,-18,-12,52,-15,-191,-191,-191,-191,52,-16,-135,-41,-9,-7,52,-131,-139,-133,52,52,-138,-191,-191,-132,52,52,52,52,52,-191,-134,-130,52,-129,52,52,52,52,52,52,52,52,52,52,-165,-176,-136,-95,-128,52,-137,52,-31,-37,-35,-30,-33,-39,-36,-38,-32,52,-34,-40,-189,52,52,52,-191,-164,-13,52,52,-157,-156,-191,-175,52,-158,52,52,52,-191,-142,-149,-191,-153,-152,52,-147,52,52,52,-191,-148,52,-143,52,52,-191,52,]),'KEYWORD_CASE':([99,104,105,200,239,240,268,272,273,289,310,319,],[-41,-9,-7,237,237,-191,-42,-191,-159,-160,-191,-161,]),'COMMA':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,71,74,79,80,83,85,87,94,95,100,101,102,103,108,115,126,134,137,139,145,146,179,180,181,183,187,188,191,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,219,224,230,232,233,235,242,243,244,245,246,247,249,250,251,252,253,255,262,264,265,266,314,339,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,-23,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-122,-51,-49,-74,-19,-84,-79,-182,177,-72,-79,-82,-26,-71,-28,-76,-24,-22,-75,211,-104,-184,-48,-170,228,-124,231,-91,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-25,-183,-29,-88,-44,-46,-111,-114,-116,-117,-110,-109,-115,-112,-113,-118,-119,-103,-107,-171,-108,-92,-120,231,]),'REMAINDER':([9,23,25,29,34,37,38,39,40,45,50,57,60,64,68,71,80,85,87,100,101,102,103,108,115,126,134,139,187,194,195,196,203,204,218,230,232,],[-123,-27,-86,-85,-83,-26,-87,-67,-73,120,-77,-80,-121,-81,-82,-122,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-124,-70,-69,-68,120,120,-78,-29,-88,]),'OR':([9,23,25,27,29,34,37,38,39,40,42,45,49,50,51,56,57,59,60,64,66,68,71,74,79,80,85,87,100,101,102,103,108,115,126,134,139,180,187,194,195,196,197,198,202,203,204,206,207,208,209,213,214,216,218,230,232,233,235,341,],[-123,-27,-86,-45,-85,-83,-26,-87,-67,-73,117,-64,-56,-77,-43,-47,-80,-61,-121,-81,-53,-82,-122,-51,-49,-74,-84,-79,-72,-79,-82,-26,-71,-28,-76,-82,-75,-48,-124,-70,-69,-68,-63,-62,-50,-65,-66,-59,-57,-58,-60,-55,-54,-52,-78,-29,-88,-44,-46,117,]),'CHOOSE':([222,],[260,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([13,15,151,159,276,337,346,],[22,22,22,22,22,22,22,]),'variable_declaration_initializer':([274,],[290,]),'array_access':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'block_statements_opt':([13,15,151,],[26,91,215,]),'inclusive_or_expression':([13,15,61,86,112,114,148,151,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[27,27,27,27,27,27,27,27,27,27,27,27,235,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_statement':([13,15,151,159,],[28,28,28,28,]),'equality_expression':([13,15,61,86,106,112,114,130,148,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[74,74,74,74,74,74,74,74,74,74,216,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'statement_expression':([13,15,151,159,276,337,346,],[31,31,31,31,31,31,31,]),'for_loop':([173,],[220,]),'local_variable_declaration_statement':([13,15,151,159,],[33,33,33,33,]),'method_return_type':([263,],[285,]),'ProgramStructure':([0,],[2,]),'SingletonObject':([0,2,13,15,151,159,],[6,6,35,35,35,35,]),'method_header_name':([13,15,151,159,],[36,36,36,36,]),'class_initializer':([274,],[293,]),'array_data_type':([210,226,229,263,313,320,],[252,252,252,252,252,252,]),'int_float':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'name':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,210,226,229,231,237,260,263,274,276,277,292,307,313,316,317,320,321,335,337,338,346,],[37,37,103,103,103,37,103,37,103,37,37,103,103,103,103,103,103,103,103,103,103,103,103,37,103,103,37,103,37,37,103,37,103,253,253,253,37,37,37,253,37,37,37,312,37,253,37,37,253,37,37,37,103,37,]),'class_body_start':([7,],[15,]),'class_params':([19,],[95,]),'argument_list_opt':([114,321,],[190,328,]),'variable_declarator_id':([96,],[179,]),'for_step_opts':([258,],[278,]),'conditional_and_expression':([13,15,61,86,112,114,148,151,159,170,192,193,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[51,51,51,51,51,51,51,51,51,51,233,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_expression':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[39,39,100,108,126,39,139,39,39,39,39,194,195,196,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'ObjectDeclare':([0,2,13,15,151,159,],[3,3,3,3,3,3,]),'unary_expression_not_plus_minus':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'switch_statement':([13,15,151,159,276,337,346,],[41,41,41,41,41,41,41,]),'c_literal':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'valid_variable':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[87,87,101,101,101,87,101,87,101,87,87,101,101,101,101,101,101,101,101,101,101,101,101,87,101,101,87,101,87,87,101,87,101,87,87,87,87,87,87,87,87,87,87,87,87,101,87,]),'reference_type':([210,226,229,263,313,320,],[246,246,246,246,246,246,]),'argument_list':([114,321,335,],[188,188,339,]),'conditional_or_expression':([13,15,61,86,112,114,148,151,159,170,193,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,341,42,]),'variable_declaration_body':([70,],[144,]),'class_param_clause':([10,],[20,]),'do_while_statement':([13,15,151,159,],[44,44,44,44,]),'multiplicative_expression':([13,15,61,86,106,112,114,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[45,45,45,45,45,45,45,45,45,45,203,204,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'for_update':([173,],[221,]),'shift_expression':([13,15,61,86,106,112,114,130,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[49,49,49,49,49,49,49,49,206,207,208,209,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'variable_literal':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'end_scope':([26,91,215,],[105,175,257,]),'fun_params_opt':([111,],[182,]),'class_and_objects':([0,2,],[5,11,]),'assignment_operator':([87,],[170,]),'expression':([13,15,61,86,112,114,148,151,159,193,231,237,260,274,276,277,307,316,317,321,335,337,346,],[53,53,138,160,186,191,212,53,53,234,266,270,281,295,53,302,318,324,325,191,191,53,53,]),'block':([3,13,15,151,159,174,276,280,286,287,330,337,346,],[14,54,54,54,54,223,301,303,309,310,336,54,54,]),'if_then_else_statement':([13,15,151,159,],[55,55,55,55,]),'for_untilTo':([281,],[304,]),'exclusive_or_expression':([13,15,61,86,106,112,114,148,151,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[56,56,56,56,180,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'if_then_else_intermediate':([276,337,346,],[299,340,347,]),'if_then_statement':([13,15,151,159,],[58,58,58,58,]),'marker':([22,28,32,41,44,54,55,58,76,78,81,82,90,117,118,125,201,220,240,256,259,267,269,272,282,301,304,323,331,345,],[98,107,110,116,119,128,129,131,154,156,158,159,174,192,193,199,241,258,273,276,280,286,287,289,307,128,317,330,337,346,]),'additive_expression':([13,15,61,86,106,112,114,123,124,130,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[59,59,59,59,59,59,59,197,198,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'simple_name':([1,13,15,24,30,52,61,65,86,106,112,113,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,210,226,229,231,237,260,263,274,276,277,292,307,313,316,317,320,321,335,337,338,346,],[10,60,60,60,60,60,60,60,60,60,60,187,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'method_declaration':([13,15,151,159,],[62,62,62,62,]),'fun_params':([111,],[183,]),'block_statement':([13,15,151,159,],[63,63,63,217,]),'primitive_type':([210,226,229,263,313,320,],[247,247,247,247,247,247,]),'literal':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'relational_expression':([13,15,61,86,106,112,114,130,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[66,66,66,66,66,66,66,66,66,213,214,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'statement':([13,15,151,159,],[67,67,67,67,]),'method_invocation':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[68,68,102,102,102,134,102,134,102,134,134,102,102,102,102,102,102,102,102,102,102,102,102,134,102,102,68,102,68,134,102,134,102,134,134,134,134,68,134,134,134,134,134,134,68,102,68,]),'type':([210,226,229,263,313,320,],[248,262,265,284,322,327,]),'empty':([13,15,19,22,28,32,41,44,54,55,58,61,76,78,81,82,90,111,114,117,118,125,151,177,201,220,236,240,256,258,259,267,269,272,282,299,301,304,310,321,323,331,340,345,],[69,69,97,99,99,99,99,99,99,99,99,135,99,99,99,99,99,185,189,99,99,99,69,225,99,99,268,99,99,279,99,99,99,99,99,268,99,99,268,189,99,99,268,99,]),'normal_statement':([13,15,151,159,276,337,346,],[78,78,78,78,298,298,298,]),'qualified_name':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,210,226,229,231,237,260,263,274,276,277,292,307,313,316,317,320,321,335,337,338,346,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'class_body':([7,],[16,]),'class_param':([19,177,],[94,224,]),'switch_label':([200,239,],[236,236,]),'class_header':([0,2,13,15,151,159,],[7,7,7,7,7,7,]),'class_declaration_keyword_opt':([19,177,],[96,96,]),'method_start_scope':([75,],[151,]),'method_header':([13,15,151,159,],[75,75,75,75,]),'empty_statement':([13,15,151,159,276,337,346,],[76,76,76,76,76,76,76,]),'local_variable_declaration':([13,15,151,159,],[77,77,77,77,]),'func_arg_start':([10,36,],[19,111,]),'if_then_else_statement_precedence':([276,337,346,],[297,297,297,]),'declaration_keyword':([13,15,19,151,159,177,],[70,70,93,70,70,93,]),'for_statement':([13,15,151,159,],[32,32,32,32,]),'fun_variable_declarator_id':([111,228,],[181,264,]),'narker':([236,299,310,340,],[269,315,319,343,]),'class_data_type':([210,226,229,263,313,320,],[245,245,245,245,245,245,]),'and_expression':([13,15,61,86,106,112,114,130,148,151,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[79,79,79,79,79,79,79,202,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'base_variable_set':([13,15,24,30,52,61,65,86,106,112,114,120,121,122,123,124,130,132,133,140,141,142,143,148,149,150,151,157,159,170,192,193,199,231,237,260,274,276,277,307,316,317,321,335,337,338,346,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'return_statement':([13,15,151,159,276,337,346,],[81,81,81,81,81,81,81,]),'switch_block_statement':([200,239,],[240,272,]),'block_statements':([13,15,151,],[82,82,82,]),'assignment_expression':([13,15,61,86,112,114,148,151,159,170,193,231,237,260,274,276,277,307,316,317,321,335,337,346,],[83,83,83,83,83,83,83,83,83,219,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'expression_optional':([61,],[136,]),'class_params_opt':([19,],[92,]),'assignment':([13,15,61,86,112,114,148,151,159,170,193,231,237,260,274,276,277,307,316,317,321,335,337,346,],[84,84,137,137,137,137,137,84,84,137,137,137,137,137,137,84,137,137,137,137,137,137,84,84,]),'method_body':([75,],[152,]),'start_scope':([3,13,15,151,159,174,276,280,286,287,330,337,346,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'array_initializer':([274,],[291,]),'identifiers':([70,],[145,]),'class_declaration':([0,2,13,15,151,159,],[4,4,88,88,88,88,]),'switch_block':([127,],[201,]),'switch_block_statements':([200,],[239,]),'dimension':([37,103,],[115,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgramStructure","S'",1,None,None,None),
  ('ProgramStructure -> ProgramStructure class_and_objects','ProgramStructure',2,'p_program_structure','backpatch.py',105),
  ('ProgramStructure -> class_and_objects','ProgramStructure',1,'p_program_structure','backpatch.py',106),
  ('class_and_objects -> SingletonObject','class_and_objects',1,'p_class_and_objects','backpatch.py',113),
  ('class_and_objects -> class_declaration','class_and_objects',1,'p_class_and_objects','backpatch.py',114),
  ('SingletonObject -> ObjectDeclare block','SingletonObject',2,'p_SingletonObject','backpatch.py',118),
  ('ObjectDeclare -> KEYWORD_OBJECT IDENTIFIER','ObjectDeclare',2,'p_object_declare','backpatch.py',128),
  ('block -> start_scope block_statements_opt end_scope','block',3,'p_block','backpatch.py',135),
  ('start_scope -> BLOCKBEGIN','start_scope',1,'p_start_scope','backpatch.py',140),
  ('end_scope -> BLOCKEND','end_scope',1,'p_end_scope','backpatch.py',151),
  ('block_statements_opt -> block_statements','block_statements_opt',1,'p_block_statements_opt','backpatch.py',161),
  ('block_statements_opt -> empty','block_statements_opt',1,'p_block_statements_opt','backpatch.py',162),
  ('block_statements -> block_statement','block_statements',1,'p_block_statements','backpatch.py',167),
  ('block_statements -> block_statements marker block_statement','block_statements',3,'p_block_statements','backpatch.py',168),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block_statement','backpatch.py',178),
  ('block_statement -> statement','block_statement',1,'p_block_statement','backpatch.py',179),
  ('block_statement -> class_declaration','block_statement',1,'p_block_statement','backpatch.py',180),
  ('block_statement -> SingletonObject','block_statement',1,'p_block_statement','backpatch.py',181),
  ('block_statement -> method_declaration','block_statement',1,'p_block_statement','backpatch.py',182),
  ('expression -> assignment_expression','expression',1,'p_expression','backpatch.py',188),
  ('expression_optional -> expression','expression_optional',1,'p_expression_optional','backpatch.py',196),
  ('expression_optional -> empty','expression_optional',1,'p_expression_optional','backpatch.py',197),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','backpatch.py',203),
  ('assignment_expression -> conditional_or_expression','assignment_expression',1,'p_assignment_expression','backpatch.py',204),
  ('assignment_expression -> method_invocation','assignment_expression',1,'p_assignment_expression','backpatch.py',205),
  ('assignment -> valid_variable assignment_operator assignment_expression','assignment',3,'p_assignment','backpatch.py',221),
  ('valid_variable -> name','valid_variable',1,'p_valid_variable','backpatch.py',232),
  ('valid_variable -> array_access','valid_variable',1,'p_valid_variable1','backpatch.py',240),
  ('array_access -> name dimension','array_access',2,'p_array_access','backpatch.py',244),
  ('dimension -> LBRAC expression RBRAC','dimension',3,'p_dimension','backpatch.py',254),
  ('assignment_operator -> ASOP','assignment_operator',1,'p_assignment_operator','backpatch.py',263),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',264),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',265),
  ('assignment_operator -> REMAINDER_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',266),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',267),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',268),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',269),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',270),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',271),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',272),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','backpatch.py',273),
  ('marker -> empty','marker',1,'p_marker','backpatch.py',282),
  ('narker -> empty','narker',1,'p_narker','backpatch.py',287),
  ('conditional_or_expression -> conditional_and_expression','conditional_or_expression',1,'p_conditional_or_expression','backpatch.py',294),
  ('conditional_or_expression -> conditional_or_expression OR marker conditional_and_expression','conditional_or_expression',4,'p_conditional_or_expression','backpatch.py',295),
  ('conditional_and_expression -> inclusive_or_expression','conditional_and_expression',1,'p_conditional_and_expression','backpatch.py',318),
  ('conditional_and_expression -> conditional_and_expression AND marker inclusive_or_expression','conditional_and_expression',4,'p_conditional_and_expression','backpatch.py',319),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','backpatch.py',339),
  ('inclusive_or_expression -> inclusive_or_expression OR_BITWISE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','backpatch.py',340),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','backpatch.py',357),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','backpatch.py',358),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','backpatch.py',375),
  ('and_expression -> and_expression AND_BITWISE equality_expression','and_expression',3,'p_and_expression','backpatch.py',376),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','backpatch.py',393),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',394),
  ('equality_expression -> equality_expression NEQUAL relational_expression','equality_expression',3,'p_equality_expression','backpatch.py',395),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','backpatch.py',416),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',417),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',418),
  ('relational_expression -> relational_expression GEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',419),
  ('relational_expression -> relational_expression LEQ shift_expression','relational_expression',3,'p_relational_expression','backpatch.py',420),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','backpatch.py',443),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',444),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression','backpatch.py',445),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','backpatch.py',463),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',464),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','backpatch.py',465),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','backpatch.py',482),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',483),
  ('multiplicative_expression -> multiplicative_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',484),
  ('multiplicative_expression -> multiplicative_expression REMAINDER unary_expression','multiplicative_expression',3,'p_multiplicative_expression','backpatch.py',485),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',502),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','backpatch.py',503),
  ('unary_expression -> unary_expression_not_plus_minus','unary_expression',1,'p_unary_expression','backpatch.py',504),
  ('unary_expression_not_plus_minus -> base_variable_set','unary_expression_not_plus_minus',1,'p_unary_expression_not_plus_minus','backpatch.py',520),
  ('unary_expression_not_plus_minus -> TILDA unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus','backpatch.py',521),
  ('unary_expression_not_plus_minus -> NOT unary_expression','unary_expression_not_plus_minus',2,'p_unary_expression_not_plus_minus1','backpatch.py',538),
  ('base_variable_set -> variable_literal','base_variable_set',1,'p_base_variable_set','backpatch.py',549),
  ('base_variable_set -> LPAREN expression RPAREN','base_variable_set',3,'p_base_variable_set','backpatch.py',550),
  ('variable_literal -> valid_variable','variable_literal',1,'p_variableliteral','backpatch.py',565),
  ('variable_literal -> primary','variable_literal',1,'p_variableliteral','backpatch.py',566),
  ('primary -> literal','primary',1,'p_primary','backpatch.py',582),
  ('primary -> method_invocation','primary',1,'p_primary','backpatch.py',583),
  ('literal -> int_float','literal',1,'p_literal','backpatch.py',591),
  ('literal -> c_literal','literal',1,'p_literal','backpatch.py',592),
  ('c_literal -> BOOL_CONSTT','c_literal',1,'p_c_literal_binary_true','backpatch.py',610),
  ('c_literal -> BOOL_CONSTF','c_literal',1,'p_c_literal_binary_false','backpatch.py',619),
  ('int_float -> INT_NUMBER','int_float',1,'p_int_float','backpatch.py',628),
  ('method_invocation -> name LPAREN argument_list_opt RPAREN','method_invocation',4,'p_method_invocation','backpatch.py',636),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt','backpatch.py',669),
  ('argument_list_opt -> empty','argument_list_opt',1,'p_argument_list_opt2','backpatch.py',674),
  ('argument_list -> expression','argument_list',1,'p_argument_list','backpatch.py',678),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','backpatch.py',679),
  ('declaration_keyword -> KEYWORD_VAR','declaration_keyword',1,'p_declaration_keyword','backpatch.py',692),
  ('declaration_keyword -> KEYWORD_VAL','declaration_keyword',1,'p_declaration_keyword','backpatch.py',693),
  ('local_variable_declaration_statement -> local_variable_declaration TERMINATOR','local_variable_declaration_statement',2,'p_local_variable_declaration_statement','backpatch.py',699),
  ('local_variable_declaration -> declaration_keyword variable_declaration_body','local_variable_declaration',2,'p_local_variable_declaration','backpatch.py',705),
  ('variable_declaration_initializer -> expression','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',709),
  ('variable_declaration_initializer -> array_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',710),
  ('variable_declaration_initializer -> class_initializer','variable_declaration_initializer',1,'p_variable_declaration_initializer','backpatch.py',711),
  ('variable_argument_list -> variable_declaration_initializer','variable_argument_list',1,'p_variable_argument_list','backpatch.py',717),
  ('variable_argument_list -> variable_argument_list COMMA variable_declaration_initializer','variable_argument_list',3,'p_variable_argument_list','backpatch.py',718),
  ('variable_declaration_body -> identifiers COLON type ASOP variable_declaration_initializer','variable_declaration_body',5,'p_variable_declaration_body_1','backpatch.py',727),
  ('identifiers -> identifiers COMMA IDENTIFIER','identifiers',3,'p_identifiers','backpatch.py',755),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','backpatch.py',756),
  ('variable_list -> variable_declarator_id','variable_list',1,'p_variable_list','backpatch.py',778),
  ('variable_list -> variable_list COMMA variable_declarator_id','variable_list',3,'p_variable_list','backpatch.py',779),
  ('variable_declarator_id -> IDENTIFIER COLON type','variable_declarator_id',3,'p_variable_declarator_id','backpatch.py',814),
  ('fun_variable_declarator_id -> IDENTIFIER COLON type','fun_variable_declarator_id',3,'p_fun_variable_declarator_id','backpatch.py',821),
  ('type -> primitive_type','type',1,'p_type','backpatch.py',831),
  ('type -> reference_type','type',1,'p_type','backpatch.py',832),
  ('primitive_type -> TYPE_INT','primitive_type',1,'p_primitive_type','backpatch.py',837),
  ('primitive_type -> TYPE_DOUBLE','primitive_type',1,'p_primitive_type','backpatch.py',838),
  ('primitive_type -> TYPE_CHAR','primitive_type',1,'p_primitive_type','backpatch.py',839),
  ('primitive_type -> TYPE_STRING','primitive_type',1,'p_primitive_type','backpatch.py',840),
  ('primitive_type -> TYPE_BOOLEAN','primitive_type',1,'p_primitive_type','backpatch.py',841),
  ('primitive_type -> TYPE_VOID','primitive_type',1,'p_primitive_type','backpatch.py',842),
  ('reference_type -> class_data_type','reference_type',1,'p_reference_type','backpatch.py',848),
  ('reference_type -> array_data_type','reference_type',1,'p_reference_type','backpatch.py',849),
  ('class_data_type -> name','class_data_type',1,'p_class_data_type','backpatch.py',854),
  ('array_data_type -> KEYWORD_ARRAY LBRAC TYPE_INT RBRAC','array_data_type',4,'p_array_data_type','backpatch.py',859),
  ('name -> simple_name','name',1,'p_name','backpatch.py',870),
  ('name -> qualified_name','name',1,'p_name','backpatch.py',871),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','backpatch.py',878),
  ('qualified_name -> name INST simple_name','qualified_name',3,'p_qualified_name','backpatch.py',888),
  ('array_initializer -> KEYWORD_NEW KEYWORD_ARRAY LBRAC type RBRAC LPAREN conditional_or_expression RPAREN','array_initializer',8,'p_array_initializer','backpatch.py',899),
  ('array_initializer -> KEYWORD_ARRAY LBRAC type RBRAC LPAREN argument_list RPAREN','array_initializer',7,'p_array_initializer','backpatch.py',900),
  ('class_initializer -> KEYWORD_NEW name LPAREN argument_list_opt RPAREN','class_initializer',5,'p_class_initializer','backpatch.py',930),
  ('statement -> normal_statement marker','statement',2,'p_statement','backpatch.py',941),
  ('statement -> if_then_statement marker','statement',2,'p_statement','backpatch.py',942),
  ('statement -> if_then_else_statement marker','statement',2,'p_statement','backpatch.py',943),
  ('statement -> while_statement marker','statement',2,'p_statement','backpatch.py',944),
  ('statement -> do_while_statement marker','statement',2,'p_statement','backpatch.py',945),
  ('statement -> for_statement marker','statement',2,'p_statement','backpatch.py',946),
  ('normal_statement -> block marker','normal_statement',2,'p_normal_statement','backpatch.py',951),
  ('normal_statement -> expression_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',952),
  ('normal_statement -> empty_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',953),
  ('normal_statement -> return_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',954),
  ('normal_statement -> switch_statement marker','normal_statement',2,'p_normal_statement','backpatch.py',955),
  ('expression_statement -> statement_expression TERMINATOR','expression_statement',2,'p_expression_statement','backpatch.py',961),
  ('statement_expression -> assignment','statement_expression',1,'p_statement_expression','backpatch.py',967),
  ('statement_expression -> method_invocation','statement_expression',1,'p_statement_expression','backpatch.py',968),
  ('if_then_statement -> KEYWORD_IF LPAREN expression RPAREN marker block','if_then_statement',6,'p_if_then_statement','backpatch.py',976),
  ('if_then_else_statement -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker block','if_then_else_statement',10,'p_if_then_else_statement','backpatch.py',985),
  ('if_then_else_statement_precedence -> KEYWORD_IF LPAREN expression RPAREN marker if_then_else_intermediate narker KEYWORD_ELSE marker if_then_else_intermediate','if_then_else_statement_precedence',10,'p_if_then_else_statement_precedence','backpatch.py',997),
  ('if_then_else_intermediate -> normal_statement','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',1009),
  ('if_then_else_intermediate -> if_then_else_statement_precedence','if_then_else_intermediate',1,'p_if_then_else_intermediate','backpatch.py',1010),
  ('while_statement -> KEYWORD_WHILE LPAREN marker expression RPAREN marker block','while_statement',7,'p_while_statement','backpatch.py',1016),
  ('do_while_statement -> KEYWORD_DO marker block KEYWORD_WHILE LPAREN marker expression RPAREN TERMINATOR','do_while_statement',9,'p_do_while_statement','backpatch.py',1028),
  ('for_statement -> KEYWORD_FOR LPAREN for_update RPAREN marker block','for_statement',6,'p_for_statement','backpatch.py',1041),
  ('for_update -> for_loop marker for_step_opts','for_update',3,'p_for_update','backpatch.py',1052),
  ('for_loop -> IDENTIFIER CHOOSE expression for_untilTo marker expression','for_loop',6,'p_for_loop','backpatch.py',1062),
  ('for_untilTo -> KEYWORD_UNTIL','for_untilTo',1,'p_for_untilTo1','backpatch.py',1078),
  ('for_untilTo -> KEYWORD_TO','for_untilTo',1,'p_for_untilTo2','backpatch.py',1085),
  ('for_step_opts -> KEYWORD_BY expression','for_step_opts',2,'p_for_step_opts','backpatch.py',1092),
  ('for_step_opts -> empty','for_step_opts',1,'p_for_step_opts','backpatch.py',1093),
  ('switch_statement -> expression KEYWORD_MATCH switch_block marker','switch_statement',4,'p_switch_statement','backpatch.py',1103),
  ('switch_block -> BLOCKBEGIN BLOCKEND','switch_block',2,'p_switch_block','backpatch.py',1116),
  ('switch_block -> BLOCKBEGIN switch_block_statements BLOCKEND','switch_block',3,'p_switch_block2','backpatch.py',1123),
  ('switch_block_statements -> switch_block_statement marker','switch_block_statements',2,'p_switch_block_statements','backpatch.py',1132),
  ('switch_block_statements -> switch_block_statements switch_block_statement marker','switch_block_statements',3,'p_switch_block_statements','backpatch.py',1133),
  ('switch_block_statement -> switch_label narker marker block narker','switch_block_statement',5,'p_switch_block_statement','backpatch.py',1149),
  ('switch_label -> KEYWORD_CASE expression FUNTYPE','switch_label',3,'p_switch_label','backpatch.py',1157),
  ('empty_statement -> TERMINATOR','empty_statement',1,'p_empty_statement','backpatch.py',1166),
  ('return_statement -> KEYWORD_RETURN expression_optional TERMINATOR','return_statement',3,'p_return_statement','backpatch.py',1172),
  ('method_declaration -> method_header method_body','method_declaration',2,'p_method_declaration','backpatch.py',1190),
  ('method_header -> method_header_name func_arg_start fun_params_opt RPAREN COLON method_return_type ASOP','method_header',7,'p_method_header','backpatch.py',1195),
  ('func_arg_start -> LPAREN','func_arg_start',1,'p_func_arg_start','backpatch.py',1229),
  ('fun_params_opt -> fun_params','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1239),
  ('fun_params_opt -> empty','fun_params_opt',1,'p_fun_params_opt','backpatch.py',1240),
  ('fun_params -> fun_variable_declarator_id','fun_params',1,'p_fun_params','backpatch.py',1246),
  ('fun_params -> fun_params COMMA fun_variable_declarator_id','fun_params',3,'p_fun_params','backpatch.py',1247),
  ('method_return_type -> type','method_return_type',1,'p_method_return_type','backpatch.py',1260),
  ('method_return_type -> TYPE_VOID','method_return_type',1,'p_method_return_type1','backpatch.py',1265),
  ('method_header_name -> KEYWORD_DEF IDENTIFIER','method_header_name',2,'p_method_header_name','backpatch.py',1270),
  ('method_body -> method_start_scope block_statements_opt end_scope','method_body',3,'p_method_body','backpatch.py',1284),
  ('method_start_scope -> BLOCKBEGIN','method_start_scope',1,'p_method_start_scope','backpatch.py',1289),
  ('class_declaration -> class_header class_body','class_declaration',2,'p_class_declaration','backpatch.py',1298),
  ('class_header -> KEYWORD_CLASS simple_name class_param_clause','class_header',3,'p_class_header','backpatch.py',1303),
  ('class_param_clause -> func_arg_start class_params_opt RPAREN','class_param_clause',3,'p_class_param_clause','backpatch.py',1315),
  ('class_params_opt -> class_params','class_params_opt',1,'p_class_param_opt','backpatch.py',1321),
  ('class_params_opt -> empty','class_params_opt',1,'p_class_param_opt','backpatch.py',1322),
  ('class_params -> class_param','class_params',1,'p_class_params','backpatch.py',1327),
  ('class_params -> class_params COMMA class_param','class_params',3,'p_class_params','backpatch.py',1328),
  ('class_param -> class_declaration_keyword_opt variable_declarator_id','class_param',2,'p_class_param','backpatch.py',1337),
  ('class_declaration_keyword_opt -> declaration_keyword','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt1','backpatch.py',1342),
  ('class_declaration_keyword_opt -> empty','class_declaration_keyword_opt',1,'p_class_declaration_keyword_opt2','backpatch.py',1346),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','backpatch.py',1350),
  ('type_opt -> empty','type_opt',1,'p_type_opt','backpatch.py',1351),
  ('class_body -> class_body_start block_statements_opt end_scope','class_body',3,'p_class_body','backpatch.py',1359),
  ('class_body_start -> BLOCKBEGIN','class_body_start',1,'p_class_body_start','backpatch.py',1365),
  ('empty -> <empty>','empty',0,'p_empty','backpatch.py',1373),
]
